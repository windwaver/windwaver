IT
***

Windows
=======

Pour changer le PATH dans windows sans droit administrateur
-----------------------------------------------------------
1) Start Menu -> Panneau de configuration -> Comptes utilisateur
2) Modifier vos variables d'environment
3) Path et rajouter le chemin en séprant avec un point virgule (si
   déjà des paths présents)
4) fermer la session et la ré-ouvrir 
 
.. _print-screen:

Faire un print-screen
---------------------
Pour faire un PrintScreen uniquement sur un écran, placer le curseur
sur le bon écran et faire :
::
   
  M-PrintScreen

Si un seul écran, alors pas besoin de presser la touche Alt.

Impression à l'échelle d'un pdf
-------------------------------

.. image:: /IT/figures/ImpressionAlEchelle1.PNG
    :scale: 80 %
    :align: center

.. image:: /IT/figures/ImpressionAlEchelle2.PNG
    :scale: 80 %
    :align: center

.. image:: /IT/figures/ImpressionAlEchelle3.PNG
    :scale: 80 %
    :align: center

	    
Pour effacer un répertoire sous dos
-----------------------------------

::

   rmdir /s

	    
MINGW32
=======
Pour envoyer un message avec Outlook

::

  start Outlook //c ipm.note //m "mailto:johndoe@domain.com^&subject=Hello" 


::

  start Outlook //c ipm.note //m
  "mailto:johndoe@domain.com;paul.traveri@gmail.com^&cc=are@gmail.com^&subject=Hello^&body=aslfdsff%0A%0Ajsdfjklé%0Aasdfjé"

Le %0A est pour insérer un retour à la ligne

emacs
=====

Insatallation
-------------

#. Installer MiKTteX (développer...)
#. Installer emacs
   
   a. Prendre la dernière version du site officiel (le .zip)
   #. Dézipper
   #. M-x package-install
   #. choisir auctex
   #. C-x C-f ~/.emacs (cela créera le .emacs au bon endroit)
   #. copier ses lignes préférées dans celui-ci   


.emacs
------
Le nom de ce fichier n'a pas de préfixe, il a juste un suffixe
(extension) qui est ``.emacs`` Il faut le copier dans ``home/yd``

Pour éditer le .emacs ou le créer au bon emplacement
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::
   
  C-x-f ~/.emacs

Pour envoyer les choses deletée à la poubelle
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Cela permet de récupérer les fichiers ou répertoire effacés par
mégarde.

::
   
  (setq delete-by-moving-to-trash t)

  
Pour ne pas être embêté par l'affichage des accents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Je préfère encoder en ``UTF-8``. Pour cela j'insère ce bloc de code
dans le .emacs

::

  (set-language-environment 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  (prefer-coding-system 'utf-8)

Si le défaut persiste, on peut essayer les méthodes suivantes pour 
enlever remettre les accents.

Méthode 1
'''''''''

 1. renommer le fichier en .txt
 2. rouvrir ce dernier avec ``Emacs``
 3. copier tout le contenu
 4. couper dans un nouveau fichier .tex
 5. à la demande d'``Emacs`` si demande il y'a, ne pas l'enregistrer
    en UTF8, mais taper tab et choisir latin1

Remarque : Dans un pdf, si les accents sont bien présents dans emacs
et pas dans le pdf. Il faut alors faire le racourci clavier suivant~:
``C-x RET f codage RET`` et choisir ``latin-1``.

Méthode 2
'''''''''

1) ::

    M-x revert-buffer-with-coding-system
    
2) choisir utf-8 ou latin-1
   
Méthode 3
'''''''''

Si des accents s'affichent dans TeXworks malgré tous les packages et 
l'encodage UTF-8 réglés correctement (cela m'est arrivé lors d'un
copier-coller du contenu de Outlook dans emacs.)

1) copier le contenu du fichier.tex dans un bloc note
2) enregistrer sous encodage UTF-8

Cela devrait fonctionner.

Méthode 4
'''''''''

You can also mark the entire file with C-x h and then try M-x
recode-region. It will ask you for Text was really in and But was
interpreted as. For the first file in your question, it looks like it
should be latin-1 and utf-8, and for the second example it should
probably be the other way around, utf-8 and latin-1. 

After you got it right, you can choose which coding system to save the
file with using M-x set-buffer-file-coding-system (or C-x C-m f for
short).

copier/coller sans toujours à répondre à la même question du coding
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Pour pouvoir copier/coller depuis windows et pour pas que emacs
demande à chaque fois le format du coding, insérer la ligne suivante
dans fichier .emacs.

::
   
  (setq selection-coding-system 'compound-text-with-extensions)

Pour que les fichiers effacés en mode dired aillent dans la Corbeille
de Windows

Placer ce code dans le ``.emacs`` :

::
   
   (setq delete-by-moving-to-trash t)


Raccourcis clavier
------------------
Ci-dessous quelques raccourcis utiles pour l'utilisation de Emacs et
LaTeX. La plupart de ces raccourcis ont été trouvés à l'addresse
suivante
https://loquehumaine.wordpress.com/2010/04/01/mes-raccourcis-emacs/ Un
grand Merci donc à cette personne. 

Général
^^^^^^^

+-------------------+----------------------------------------------+
| Raccourcis        | Descriptions                                 |
+===================+==============================================+
| F7                | mode flyspell correcteur orthographique)     |
+-------------------+----------------------------------------------+
| F8                | appelle Ispell buffer                        |
+-------------------+----------------------------------------------+
| C-h a             | propos                                       |
+-------------------+----------------------------------------------+
| C-h k             | recherche de ce que fait un raccourci        |
+-------------------+----------------------------------------------+
| C-g g             | annuler                                      |
+-------------------+----------------------------------------------+
| C-u 5 -           | répète 5 fois                                |
+-------------------+----------------------------------------------+
| C-u 5 BackSpace   | efface les 5 derniers caractères             |
+-------------------+----------------------------------------------+
| M-/               | complétion avec les mots des buffers ouverts |
+-------------------+----------------------------------------------+
| M-x load-buffer   | charger un .emacs                            |
+-------------------+----------------------------------------------+
| M-x xxx-mode      | mode xxx (latex,html,python,...)             |
+-------------------+----------------------------------------------+
| M-\$              | ispell sur le mot                            |
+-------------------+----------------------------------------------+
| M-!               | exécuter une commande bash                   |
+-------------------+----------------------------------------------+ 
| C-u- M-!          | insérer le résultat d'une commande bash      | 
+-------------------+----------------------------------------------+
| M-x               | écrire des commandes en ligne de commande    |
+-------------------+----------------------------------------------+
| M-x menu-bar-mode | pour afficher / enlever la barre d'outils    | 
+-------------------+----------------------------------------------+ 
| M-x cua-mode      | copier-coller d'une autre applications       |
+-------------------+----------------------------------------------+
| C-x C-c           | quitte Emacs                                 |
+-------------------+----------------------------------------------+
| C-z               | minimise Emacs                               |
+-------------------+----------------------------------------------+
| C-x u             | pour annuler (undo)                          |
+-------------------+----------------------------------------------+
| C-x C-s           | enregistre le buffer courant                 |
+-------------------+----------------------------------------------+



Pour se déplacer
^^^^^^^^^^^^^^^^

+---------------+----------------------------------------------------+
| Raccourcis    | Descriptions                                       |
+===============+====================================================+
| C-a           | aller au début de la ligne                         |
+---------------+----------------------------------------------------+
| M-a           | aller au début de la phrase                        |
+---------------+----------------------------------------------------+
| C-e           | aller à la fin de la ligne                         |
+---------------+----------------------------------------------------+
| M-e           | aller à la fin de la phrase                        |
+---------------+----------------------------------------------------+
| C-f           | se déplacer au caractère suivant                   |
+---------------+----------------------------------------------------+
| M-f           | se déplacer au mot suivant                         |
+---------------+----------------------------------------------------+  
| C-b           | se déplacer au caractère précédent                 |
+---------------+----------------------------------------------------+
| M-b           | se déplacer au mot                                 |
+---------------+----------------------------------------------------+
| C-p           | se déplacer à ligne précédente                     |
+---------------+----------------------------------------------------+
| C-n           | se déplacer à ligne suivante                       |
+---------------+----------------------------------------------------+
| C-v           | écran suivant                                      |
+---------------+----------------------------------------------------+
| M-v           | écran précédent                                    |
+---------------+----------------------------------------------------+
| C-M-v         | écran suivant dans l'autre buffer                  |
+---------------+----------------------------------------------------+
| C-l           | mettre la ligne active au milieu du buffer         |
+---------------+----------------------------------------------------+
| C-x l chiffres| aller à la ligne chiffres                          | 
+---------------+----------------------------------------------------+ 
| M-<           | aller au début du buffer                           | 
+---------------+----------------------------------------------------+ 
| M-S-<         | aller à la fin du buffer                           |
+---------------+----------------------------------------------------+
| C-u 0 C-l     | met la ligne courante en première ligne du buffer  |
+---------------+----------------------------------------------------+


Marques
^^^^^^^
+-----------+--------------------------------------------------------+ 
|Raccourcis | Descriptions                                           |
+===========+========================================================+
| C-SPC     |faire une marque (donc le début d une région/rectangle) |  
+-----------+--------------------------------------------------------+  
| C-@       |faire une marque (donc le début d une région/rectangle) |
+-----------+--------------------------------------------------------+
| M-@       | marquer le mot (C-u 4 M-@ marquer 4 mots)              |
+-----------+--------------------------------------------------------+
| C-x C-x   | échanger le point et la marque                         |
+-----------+--------------------------------------------------------+
| C-u C-SPC | revenir en arrière sur les marques                     |
+-----------+--------------------------------------------------------+
| M-h       | sélectionner le paragraphe                             |
+-----------+--------------------------------------------------------+
| C-x h     | sélectionner tout le buffer                            |
+-----------+--------------------------------------------------------+


Editer, couper, copier, coller
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+-----------+-------------------------------------------+
|Raccourcis | Descriptions                              |
+===========+===========================================+
| C-d       | tuer la prochaine lettre                  |
+-----------+-------------------------------------------+
| M-d       | tuer le prochain mot                      |
+-----------+-------------------------------------------+
| BackSpace | tuer la lettre présédente                 |
+-----------+-------------------------------------------+
| M-BackSpc | tuer le mot précédent                     |
+-----------+-------------------------------------------+
| C-k       | tuer la fin de la ligne                   |
+-----------+-------------------------------------------+
| C-w       | tuer la région                            |
+-----------+-------------------------------------------+
| C-y       | coller le dernier truc tué                |
+-----------+-------------------------------------------+
| M-y       | revenir plus en arrière dans la liste des |
+-----------+-------------------------------------------+
|           | trucs tués (après C-y donc)               |
+-----------+-------------------------------------------+
| C-t       | échanger 2 lettres                        |
+-----------+-------------------------------------------+
| M-t       | échanger 2 mots                           |
+-----------+-------------------------------------------+
| C-x C-t   | échanger 2 lignes                         |
+-----------+-------------------------------------------+
| C-x r r   | copier le rectangle                       |
+-----------+-------------------------------------------+
| C-x r k   | tuer le rectangle                         |
+-----------+-------------------------------------------+
| C-x r y   | coller le rectangle                       |
+-----------+-------------------------------------------+
| M-z x     | tuer jusqu'au caractère x                 |
+-----------+-------------------------------------------+
| M-u       | uppercase                                 |
+-----------+-------------------------------------------+
| M-l       | lowercase                                 |
+-----------+-------------------------------------------+
| M-c       | capital                                   |
+-----------+-------------------------------------------+
| C-x C-u   | uppercase de la région                    |
+-----------+-------------------------------------------+
| C-x C-l   | lowercase de la région                    |
+-----------+-------------------------------------------+

Rechercher et remplacer
^^^^^^^^^^^^^^^^^^^^^^^

+--------------------+----------------------------------------------+
| Raccourcis         | Descriptions                                 |
+====================+==============================================+
| C-s                | chercher                                     |
+--------------------+----------------------------------------------+
| C-r                | chercher en arrière                          | 
+--------------------+----------------------------------------------+
| M-%                | chercher / remplacer (! pour tous, C-q C-j   |
+--------------------+----------------------------------------------+
|                    | pour insérer un saut de ligne, haut bas pour |
+--------------------+----------------------------------------------+
|                    | naviguer dans l'historique des trucs         |
+--------------------+----------------------------------------------+
|                    | recherchés)                                  |
+--------------------+----------------------------------------------+
| C-M-s              | chercer avec regexp en arrière               |
+--------------------+----------------------------------------------+
| C-M-%              | chercher / remplacer avec regexp             |
+--------------------+----------------------------------------------+
| M-x replace-string | recherche / remplacer (permet de remplacer   |
+--------------------+----------------------------------------------+
|                    | par un mot commençant par un \\ )            |
+--------------------+----------------------------------------------+

Fenêtres / buffers
^^^^^^^^^^^^^^^^^^

+--------------------+----------------------------------------------+
| Raccourcis         | Descriptions                                 |
+====================+==============================================+
| C-x 1              | le buffer courant devient le seul buffer     |
+--------------------+----------------------------------------------+
| C-x 2              | splitter horizontalement                     | 
+--------------------+----------------------------------------------+
| C-x 3              | splitter verticalement                       |
+--------------------+----------------------------------------------+
| C-x 0              | la fenêtre du buffer courant est fermé       |
+--------------------+----------------------------------------------+
| C-x k              | tuer le buffer                               |
+--------------------+----------------------------------------------+
| C-x droite/gauche  | naviguer dans la liste des buffers           |
+--------------------+----------------------------------------------+
| C-x o              | passe  l'autre fenêtre                       |
+--------------------+----------------------------------------------+
| C-x b              | ouvrir parmi les buffers                     |
+--------------------+----------------------------------------------+
| C-x i              | insérer un fichier                           |
+--------------------+----------------------------------------------+

Mode Dired
^^^^^^^^^^

+--------------------+----------------------------------------------+
| Raccourcis         | Descriptions                                 |
+====================+==============================================+
| q                  | close the file                               |
+--------------------+----------------------------------------------+
| c                  | copy file                                    | 
+--------------------+----------------------------------------------+
| R                  | rename file                                  |
+--------------------+----------------------------------------------+
| D                  | Delete file                                  |
+--------------------+----------------------------------------------+
| \+                 | create a new dir                             |
+--------------------+----------------------------------------------+
| z                  | compress / decompress                        |
+--------------------+----------------------------------------------+
| m                  | mark a file                                  |
+--------------------+----------------------------------------------+
| u                  | unmark                                       |
+--------------------+----------------------------------------------+
| U                  | unmark all marked                            |
+--------------------+----------------------------------------------+
| &m                 | mark by file name extension                  |
+--------------------+----------------------------------------------+
| %m                 | mark by pattern (regex)                      |
+--------------------+----------------------------------------------+
| g                  | refresh                                      |
+--------------------+----------------------------------------------+
| x                  | applique les changements                     |
+--------------------+----------------------------------------------+
| ^                  | go to parent dir                             |
+--------------------+----------------------------------------------+
| dired-do-copy      | copier le répertoire ou fichier              |
+--------------------+----------------------------------------------+

Mode LaTeX
^^^^^^^^^^

+--------------------+----------------------------------------------+
| Raccourcis         | Descriptions                                 |
+====================+==============================================+
| C-c C-s            | nouvelle section (défaut : section, sinon la |
+--------------------+----------------------------------------------+
|                    | plus petite sous-section courante)           | 
+--------------------+----------------------------------------------+
| C-c C-e            | nouvel environnement (défaut : itemize)      |
+--------------------+----------------------------------------------+
| C-c C-j            | nouvel \\item                                |
+--------------------+----------------------------------------------+
| C-u C-c C-e        | changer l'environnement                      |
+--------------------+----------------------------------------------+
| C-c C-f C-c        | textsc                                       |
+--------------------+----------------------------------------------+
| C-c C-f C-e        | emph                                         |
+--------------------+----------------------------------------------+
| C-c C-f C-i        | textit                                       |
+--------------------+----------------------------------------------+
| C-c C-f C-b        | textbf                                       |
+--------------------+----------------------------------------------+
| C-c C-c C-t        | texttt                                       |
+--------------------+----------------------------------------------+
| C-c C-f C-r        | textrm                                       |
+--------------------+----------------------------------------------+
| si entre & &       | mathrm, ...                                  |
+--------------------+----------------------------------------------+
| C-c C-f C-d        | enlever le textxx                            |
+--------------------+----------------------------------------------+
| C-u C-c C-f C-?    | remplacer le textxx par text??               |
+--------------------+----------------------------------------------+
| C-c ;              | commente la région                           |
+--------------------+----------------------------------------------+
| C-c %              | commente le paragraphe                       |
+--------------------+----------------------------------------------+

Formatage
^^^^^^^^^

+--------------------+----------------------------------------------+
| Raccourcis         | Descriptions                                 |
+====================+==============================================+
| C-M-\\             | formater la région                           |
+--------------------+----------------------------------------------+
| M-q                | formater le paragraphe                       | 
+--------------------+----------------------------------------------+
| C-c C-q C-e        | formater l'environnement                     |
+--------------------+----------------------------------------------+
| C-c C-q C-s        | formater la section                          |
+--------------------+----------------------------------------------+
| C-c .              | marquer l'environnement                      |
+--------------------+----------------------------------------------+
| C-c *              | marquer la  section                          |
+--------------------+----------------------------------------------+
| C-M-a              | début d'environnement                        |
+--------------------+----------------------------------------------+
| C-M-e              | fin d'environnement                          |
+--------------------+----------------------------------------------+

Pour supprimer les ^M en fin de ligne
-------------------------------------

Faire la séquence suivante :

``M-< C-q C-M Enter C-q C-j Enter !``

Explications :

1. ``M-<`` on se place au début du document
2. ``M-%`` on active le mode de remplacement de caractères

#. ``C-q C-M`` on va remplacer les ^M
#. ``C-q C-j`` on va y mettre à la place des retours à la ligne
#. ``!`` on applique ces modifications à toutes les occurences rencontrées
   dans le fichier
   
Débugger emacs
--------------

``C-c apostrophe espace``


Changer le thème (couleur de fond,...)
--------------------------------------

J'utilise le thème misterioso (il en existe bien sûr d'autres)

::

   (load-theme 'misterioso)

à placer dans le .emacs


Compilation
-----------
.. _Compilation avec XeLaTeX depuis emacs:


Compilation avec XeLaTeX depuis emacs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
J'utilise souvent cette méthode pour compiler une figure dessinée par
psTricks qui produit directement un pdf.

1) afficher le menu : ::
     
        M-x menu bar-mode
    
2) Command -> TeXing Options -> Use XeTeX engine

ou simplement :

C-c-c tab et sélectionner xelatex


LaTeX
=====

Installation LaTex, Emacs et auxtex sous Linux
----------------------------------------------

1. télécharger la dernière version de ``tex-live`` sur le site
   officiel
   
   a. télécharger le .iso
   b. copier les dossiers sur le bureau
   c. écrire dans un terminal :
      
      ::
	 perl install-tl

   d. I
   e. ``etc/environement``, modifier le fichier pour que ça ressemble
      à ceci :
      
      ::
	 PATH="/usr/local/texlive/2016/bin/i386-linux:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games" 
	 MANPATH="/usr/local/texlive/2016/texmf/doc/man"
	 INFOPATH="/usr/local/texlive/2016/texmf/doc/info"
	 
   .. note::
      changer si nécessaire 2016
      
2. installer emacs avec le synaptique

#. installer auxtec avec le synap
#. copier .emacs dans yd
#. pour que auxtex et emac communique entre eux, il faut rajouter ces
   lignes dans le .emacs (si pas déjà fait)~: 
  
  ::
    (require 'tex-site)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTex t)
    (global-font-lock-mode t)
    
Tout ceci est tirer du site
https:\\www.math.purdue.edu/~dvb/xdvi.html pour que le script pour la 
conversion des Figures PSTicks fonctionne, il faut rajouter (dans le
script) -shell-escape après la commande
latex. (ex. latex -shell-escape 1.tex)


Figure psTricks
---------------

Pour créer des figures pstricks j'utilise emacs pour compiler en
xelatex et TeXworks pour voir le résultat compilé en mettant la fenêtre
texwork à côté de celle de emacs.

Voir le résultat compilé avec xelatex avec TeXworks)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. clique droit sur le pdf
#. ouvrir avec
#. TeXworks - a graphical user interface to the typesetting system TeX
   and its extensions
#. placer la fenêtre à coté de celle de emacs
#. en compilant avec C-c-c, la fenêtre TeXworks se rafraîchit
   automatiquement

   .. image:: /IT/figures/pstrick_xelatex.png
    :width: 500
    :align: center

Cropper automatiquement un pdf
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Pour enlever le blanc autours d'une figure, utiliser
|pdfcrop|. Selectionner automatique pour vraiment enlever tout le
blanc autours d'une figure. L'inconvénient est qu'il y aura plus de
marge entre le texte et la figure, il faudra insérer une ligne vide.

.. |pdfcrop| raw:: html
			      
   <a href="https://pdfresizer.com/crop"
   target="_blank">le service en ligne pdfresizer</a>

	    
Redessiner sur un pdf :
^^^^^^^^^^^^^^^^^^^^^^^^

1) convertir le pdf en .eps dans une console Unix en tapant :
   ::
      
      pdftops -eps fichierpdf.pdf
    
   .. Note::
      **remarque** cette commande marche uniquement sur un pdf d'une page
      seulement, si le pdf contient plusieurs pages, il faudra au
      préalable extraire la page qui nous intéresse. 
      Pour ce faire, voir :ref:`extraire une page d'un document pdf` 
2) utiliser le fichier FicViePSTriBox.tex téléchargeable depuis |lien1|
3) pour créer le pdf directement utiliser XeLaTeX (voir :ref:`Compilation
   avec XeLaTeX depuis emacs`)
4) pour visualiser le résultat après un C-c C-c, ouvrir le .tex avec
   TeXworks et choisir XeLaTeX cela va ouvrir une fenêtre pour voir le
   pdf créer
5) rogner le pdf avec Briss (voir :ref:`briss`) 

   .. |lien1| raw:: html

     <a href="https://drive.google.com/open?id=1F_Ey-1fIYD9GFvTb9yd7bh3Y8u85pQoo"
     target="_blank">ici</a>   

   
Sur un print-screen avec psTricks :
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1) faire un print-screen (voir :ref:`print-screen`)
2) ouvrir GIMP
3) enregistrer sous .eps
4) utiliser le fichier FicViePSTriBox.tex situé |lien1|
5) pour créer le pdf directement utiliser XeLaTeX (voir :ref:`Compilation
   avec XeLaTeX depuis emacs`)
6) pour visualiser le résultat après un C-c C-c, ouvrir le .tex avec
   TeXworks et choisir XeLaTeX cela va ouvrir une fenêtre pour voir le
   pdf créer
7) rogner le pdf avec Briss (voir :ref:`briss`)

   
Centrer la figure (pour les grosses figures)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Mettre dans le préambule :

::

   \setlength{\topmargin}{-2cm}
   \setlength{\evensidemargin}{-1cm}
   \setlength{\oddsidemargin}{-3cm}

pour modifier les marges.

.. note::

   Il arrive que cela génère une page blanche avant la figure et la
   page comprenant la figure soit numérotée. (malgré d'avoir utilisé
   la commande ``\thispagestyle{empty}``) On peut utiliser la commande
   suivante :

   ::

     \usepackage{nopageno}

Regex
=====

Java Script
-----------

caractère seul

- \d -> 0-9 \D -> pas des chiffres
- \w -> A-Z a-z 0-9  \W -> pas des lettres ni des chifres
- \s -> espace, tabulation  \S tout sauf des espaces
- . -> n'importe quel caractère

Quantificateur

- \* -> 0 ou plus
- \+ -> 1 ou plus
- ? -> 0 ou un seul
- {min,max} -> entre min et max fois
- {n} -> n fois
- ? si appairé avec un quantificateur alors ce ne sera pas
  gridy. gridy veut dire qui prendre la plus grande correspondance
  
Exemple pour Gridy :

.. image:: /IT/figures/Regex_gridy1.PNG
       :width: 500
       :align: center
	       
pour enlever le gridy :

.. image:: /IT/figures/Regex_not_gridy.PNG
       :width: 500
       :align: center


Position

^ -> début de ligne
$ -> fin de ligne
\b -> word boundery

Exemple pour \b :

.. image:: /IT/figures/RegexWordBoundery1.PNG
       :width: 500
       :align: center
.. image:: /IT/figures/RegexWordBoundery2.PNG	   
       :width: 500
       :align: center

Classe de caractère

[abc] -> soit un a un b ou un c
[-.] -> le point n'est pas un charactère meta mais un point litéral
(car il est compris dans une classe)
on échappera avec \ si l'on veut un point litéral et qu'il n'est pas
dans une classe.

"-" si il est au début de la classe il sera pris commme
un trait d'union litéral. Par-contre s'il est au centre de par exemple
[a-d] il sera interpréter comme un interval ici a ou b ou c ou d
"^" s'il est au début alors ça inverse, par exemple [^a-c] alors tous
les autres caractères seront pris sauf a,b,c.


Exemple :

.. image:: /IT/figures/Regex1.PNG
       :width: 500
       :align: center


Altération

(net|com) si on veut "net" ou "com"

Groupe

.. image:: /IT/figures/Regex_group.PNG
       :width: 500
       :align: center

on appellera $1 $2 suivant qu'il y plusieurs groupe $0 représente tout
ce qui a été trouvé

Back Reference

.. image:: /IT/figures/Regex_Back_Reference.PNG
       :width: 500
       :align: center

Implémentation de Regex dans Java Script
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

variable string:

var s = "hello"

variable regex :

var r = /hello/

.. image:: /IT/figures/Regex_test.PNG
       :width: 500
       :align: center

Flags :

g pour global

/\d{3}/g

i pour case insensitive

match :

.. image:: /IT/figures/Regex_match.PNG
       :width: 500
       :align: center

match construit un array avec g, mais si la regex comporte un groupe
() alors si le flag g est présent le groupe ne sera pas mis dans l'array	     

.. image:: /IT/figures/regex_match_group.PNG
       :width: 500
       :align: center

pour que même le groupe soit pris dans l'array, il faut utiliser
r.exec(s) et faire une boucle::


  var results;
  while (results=r.exec(s){
  createP(results[1]);
  }


bash
====
Echo
----
Afficher des variable système
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::
    
  echo PATH

::
   
 echo HOME

pour remplir un fichier

::

 echo -e "Qte\tPrix\tTotal\n\n3\t5\t15frs" > fichier

.. note::
   On peut afficher le contenu d'un fichier avec la commande ``cat
   nom_de_fichier``. Si l'on veut rajouter des lignes au fichiers on
   peut utiliser ``>>`` Mais dangereux car on a vite fait d'oublier de
   mettre le deuxième ``>``.

Sed and Awk
===========
Les différents moyens d'entrer du code
--------------------------------------

::

   awk -f nom_du_script fichier_d_entree

En tapant tout le code dans un terminal :
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   awk '
   BEGIN{
   print "Hello
   World"}
   '
   
.. warning::
   Ne pas oublier l'espace entre ``awk`` et ``'``

En tapant le code dans un fichier avec la commande ``awk`` insérée dans le fichier :
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
Si le code contient ``BEGIN`` et une expression régulière alors on
entrera : 

::

 awk 'BEGIN { print "debut"}
 $0 ~ /Drive/ {print "sdfsd"}' nom_du_fichier_d_entree

Si le code contient pas d'expression régulière mais un ``BEGIN``, on
entrera : 

::

 awk 'BEGIN { print "debut"}
 {print "sdfsd"}' nom_du_fichier_d_entree   
   
Si le code ne contient pas de ``BEGIN`` alors on entrera :

::

   awk '{
   print "Hello World"
   }
   ' nom_du_fichier_d_entree

Passage des variables
---------------------

Voici un exemple pour le passage des variables d'entrée d'un programme 
awk entrer dans un fichier qui s'appelle glitch.

::

  awk 'BEGIN { FS = "\n"; RS = ""; ORS = "\n\n"}
  $0 ~ search {print $0}' search=$1 $2

   
Ici on a mis le séparateur de champ ``FS`` à un retour de ligne et le
séparateur d'enregistrement ``RS`` à une ligne vide, ceci afin de
pouvoir prendre en compte un fichier à données en bloc appelé
``glitch.data`` dont voici un extrait :

::
   
  machine	Sun 3/75
                8 meg memory
		Prone to memory glitches
		more info
		more info

  sadlefsdaf	siwefo
		asdlfa
		vmasefsdae
		glitche wefsd
		sdafsdf
  ziweower	wwerwe 3234
		sdfljkljké
		asdfvm78
		weojwd
		omcvljdoji

En tapant la commande :

::

 glitch glitc glitch.data

cela va donner :

::

  machine	Sun 3/75
		8 meg memory
		Prone to memory glitches
		more info
		more info

  sadlefsdaf	siwefo
		asdlfa
		vmasefsdae
		glitche wefsd
		sdafsdf
   

.. _Nom du lien:

Les fonctions
-------------

Emplacement pour déclaration des fonctions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::
   
   awk '
    function insert (STRING, POS, INS) {
    before = substr("Hello",1,POS)
    after = substr("Hello",POS+1)
    return before INS after
    }
   BEGIN{
      print insert($1, 4, "XX")
   }'

Divers exemples
---------------

Pour inverser les colonnes et les lignes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


::

   awk  '
   BEGIN{FS=";"}
   {
    for ( i = 1; i <= NF; ++i ){
	matrice[NR,i] = $i
	gsub(/\r/,"") #\r est le retour de ligne \n ne fonctione pas
    }
    }

    END {
	for ( j = 1; j <= NF; ++j ){
	    for ( i = 1; i <= NR; ++i ){
		printf ("%s;",matrice[i,j]) #point virgule aux séparateurs de champs à la sortie
	    }
	    if ( j < NF ) 
	    print("\r")
	}

    }' sp.txt > Result

reStructuredText
================

Installation
------------
1) installer Anaconda
2) installer VS code
3) modifier le path windows pointer les répertoires suivants :
   
   a) anaconda3/Scripts
   b) anaconda3 (c'est possible qu'il n'est pas nécessaire de pointer
      sur celui-ci)
   
Création d'un nouveau document
------------------------------
1) ouvrir Anaconda Prompt
2) aller dans le bon répertoire (tapez ``d:`` pour changer de partition)
3) une fois dans le répertoire où l'on veut mettre notre document,
   tapez : ::

     sphinx-quickstart

4) aux différentes questions répondre comme ci-dessous :
   
   ``> Separate source and build directories (y/n) [n]: y``
   
   ``> Name prefix for templates and static dir [_]:``
   
   ``> Project name: Mon nom de projet``
   
   ``> Author name(s): Alpiq AG``
   
   ``> Project release []: 1``
   
   ``> Project language [en]: fr``
   
   ``> Source file suffix [.rst]:``
   
   ``> Name of your master document (without suffix) [index]:``
   
   ``Sphinx can also add configuration for epub output:
   > Do you want to use the epub builder (y/n) [n]:``

   ``Indicate which of the following Sphinx extensions should be
   enabled:``
   ``> autodoc: automatically insert docstrings from modules (y/n) [n]:``
   
   ``> doctest: automatically test code snippets in doctest blocks
   (y/n) [n]:``

   ``> intersphinx: link between Sphinx documentation of different projects
   (y/n) [n]:`` 

   ``> todo: write "todo" entries that can be shown or hidden on build
   (y/n) [n]: y`` 

   ``> coverage: checks for documentation coverage (y/n) [n]:``

   ``> imgmath: include math, rendered as PNG or SVG images (y/n) [n]: y``
   
   ``> mathjax: include math, rendered in the browser by MathJax (y/n)
   [n]: y``

   ``> ifconfig: conditional inclusion of content based on config values
   (y/n) [n]: y`` 

   ``> viewcode: include links to the source code of documented Python
   objects (y/n)[n]:`` 

   ``> githubpages: create .nojekyll file to publish the document on GitHub
   pages (y/n) [n]:`` 

   ``> Create Makefile? (y/n) [y]:``
   
   ``> Create Windows command file? (y/n) [y]:``

5) ajouter la ligne suivante: ``master_doc = 'index'`` sinon ça bug
   avec **Read The Docs** aussi ça plante lorsqu'on compile dans un
   terminal windows (cmd) ça affiche qu'un fichier dénommé
   ``contents`` est introuvable. 

6) tapez dans le terminal : ::

     D:\tmp\sphinxTxt>make html

7) ouvrir Visual Studio Code
8) ouvrir le répertoire du projet et non le fichier .rst (File -> Open
   Folder) 
9) il se peut que l'on soit demandé à selectionner le ``conf.py``,
   selectionnez celui qui se trouve dans le répertoire du projet 
10) pour ouvrir la prévisualisation cliquer sur le symbole afficher
    sur la figure ci-dessous. Sinon ouvrir le html dans un explorateur
    qui se trouve dans le répertoire _build -> html 
   
.. image:: /IT/figures/IconePrevisualisation.png
   :alt: cette image montre où l'on doit cliquer pour ouvrir la
	 fenêtre de prévisualisation
	 
11) pour l'édition, j'utilise emacs, ouvrir le fichier ``index.rst``

    
Changement de Thèmes
--------------------

1) choisir son thème |theme|. Pour cet exemple, j'ai choisi
   ``sphinx_rtd_theme`` car il est "*mobile friendly*"

 .. |theme| raw:: html

   <a href="http:sphinx-themes.org"
   target="_blank">ici</a>

2) se connecter à internet (swisscom) et tapez dans une console :

   ::

      pip install sphinx_rtd_theme

      
3) ouvrir le ``conf.py`` et mettre ``html_theme = 'sphinx_rtd_theme'``


Compilation
-----------

Dans un **Anaconda prompt** tapez : 

::

   make html

Pour voir la doc dans un navigateur internet. Ceci créera un répertoire
``build`` et y placera deux autres répertoires : ``html`` et
``doctrees`` Dans le répertoire ``html`` on trouvera le fichier
``index.html``. En  cliquant sur ce dernier cela va ouvrir la doc dans
un navigateur internet.  
Le répertoire ``doctrees`` sert pour la table des matières.


ou

::
   
   make latex

ou

::
   
   make latexpdf

.. note::
   Après la compilation, il se peut que la table des matières ne soit
   pas dans l'ordre ou que toutes les sections suivantes ne soient
   affichées. Dans ce cas, il faut supprimer le répertoire `build` et 
   refaire une compilation.


Traduction
----------

1. installer `sphinx-intl`

  ::

   $ pip install sphinx-intl

2. rajouter ces lignes dans le `conf.py`

  ::

   locale_dirs = ['locale/']   # path is example but recommended.
   gettext_compact = False     # optional.

3.

  ::

   make gettext

4. génération des fichiers `po` (dans le cas suivant pour le japonais) 

  ::

   sphinx-intl update -p _build/gettext -l de -l ja

 sitôt fait, le fichier `po` se trouve dans le répertoire
 ./locale/ja/LC_MESSAGE`  

5. traduire le fichier `po`
   
   exemple :

  ::

   msgid "Available builders"
   msgstr "<FILL HERE BY TARGET LANGUAGE>"

  Dans le cas où il y a plusieurs lignes :

  ::

   msgid ""
   "These are the built-in Sphinx builders. More builders can be added by "

   msgstr ""
   "FILL HERE BY TARGET LANGUAGE FILL HERE BY TARGET LANGUAGE FILL
   HERE " 
   "BY TARGET LANGUAGE :ref:`EXTENSIONS <extensions>` FILL HERE."

6. génération du document traduit, saisir dans le `Anaconda Powershell
   Prompt`

  ::

   > Set-Item env:SPHINXOPTS "-D language=ja"
   > .\make.bat html
   

Pour plus d'information
^^^^^^^^^^^^^^^^^^^^^^^

|lien2|

.. |lien2| raw:: html

   <a href="http://www.sphinx-doc.org/en/master/usage/advanced/intl.html"
   target="_blank">sphinx-doc</a>

   
Mise en forme
-------------

Numérotation chapitre, section, etc...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ``#`` pour les parties
* ``*`` pour les chapitres
* ``=``, pour les sections
* ``-``, pour les sous-sections
* ``^``, pour les sous-sous-sections
* ``"``, pour les paragraphes
  

Listes et sous-listes
^^^^^^^^^^^^^^^^^^^^^

::
   
   * une puce "*"
     - une sous-liste avec "-"
       + à nouveau une sous-liste avec "+"
     - une autre option
       
Liste d'items numérotée automatiquement
"""""""""""""""""""""""""""""""""""""""

::

   1. Liste numérotée "à  la main".
   2. Deuxième item.

   #. Liste numérotée automatiquement.
   #. Deuxième item.

1. Liste numérotée "à  la main".
2. Deuxième item.

#. Liste numérotée automatiquement.
#. Deuxième item.

   
Les tableaux
^^^^^^^^^^^^

::

   +------------------------+------------+----------+
   | Header row, column 1   | Header 2   | Header 3 |
   +========================+============+==========+
   | body row 1, column 1   | column 2   | column 3 |
   +------------------------+------------+----------+
   | body row 2             | Cells may span        |
   +------------------------+-----------------------+


   ====================  ==========  ==========
   Header row, column 1  Header 2    Header 3
   ====================  ==========  ==========
   body row 1, column 1  column 2    column 3
   body row 2            Cells may span columns
   ====================  ======================

donnera :

   +------------------------+------------+----------+
   | Header row, column 1   | Header 2   | Header 3 |
   +========================+============+==========+
   | body row 1, column 1   | column 2   | column 3 |
   +------------------------+------------+----------+
   | body row 2             | Cells may span        |
   +------------------------+-----------------------+


   ====================  ==========  ==========
   Header row, column 1  Header 2    Header 3
   ====================  ==========  ==========
   body row 1, column 1  column 2    column 3
   body row 2            Cells may span columns
   ====================  ======================

   
Insertion d'une figure
^^^^^^^^^^^^^^^^^^^^^^

Si le répertoire nommé ``figures`` est au même endroit où il y a le
fichier ``index.rst`` 

::

   .. image:: /figures/IconePrevisualisation_cropped.png
       :scale: 80 %
       :align: center
      
Image svg
'''''''''

Pour avoir une image non pixelisée, le format svg peut être utilisé.

J'utilise l'adresse suivante (cliquer |svg|) pour convertir le format
pdf en svg 

 .. |svg| raw:: html

   <a href="https://convertio.co/fr/"
   target="_blank">ici</a>

		
Insérer une ligne vide
^^^^^^^^^^^^^^^^^^^^^^

Utile par exemple quand on insère une figure croppée automatiquement
(pas de marge blanche autours de la figure). Ainsi le texte ne sera
pas trop de la figure.

::
   
  .. # define a hard line break for HTML
  .. |br| raw:: html

   <br />

Mettre à l'emplacement où l'on veut avoir une ligne blanche :

::

   |br|


Surbrillance d'un texte
^^^^^^^^^^^^^^^^^^^^^^^

``Surbrillance d'un texte``

Tapez : ::

``Surbrillance d'un texte``


Pour afficher un bloc avec du code
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
::
   
 POUR AFFICHER CECI (un bloc avec du code)

Tapez : 

::
   
 ::

  POUR AFFICHER CECI (un bloc avec du code)
  

Pour créer un lien à l'intérieur d'un document 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

interne à la page ou à une autre page .rst

.. warning::

   Pour que le lien fonctionne il faut bien effacer le répertoire
   ``build`` avant (rmdir /s build) et refaire une compilation (make html).


label (à mettre où l'on veut tomber) :

::
   
 .. _Nom du lien:

Par exemple si on veut que ça tombe vers une section, on le placera
une ligne avant la section.

::
   
 .. _Nom du lien:

 reStructuredText
 ================

ref (à écrire où on veut mettre le lien)

::

 Pour plus d'information veuillez vous référer à :ref:`Nom du lien`.

Ceci donnera :

Pour plus d'information veuillez vous référer à :ref:`Nom du lien`.


Pour créer un lien à une page internet
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
En cliquant sur le lien, cela va ouvrir une nouvelle fenêtre dans le
navigateur. 

::

 En cliquant |lien|

::

 .. |lien| raw:: html

   <a href="http://python.physique.free.fr/aide/_sources/Partie1.txt"
   target="_blank">ici</a>

.. warning::
   Ne pas oublier d'indenter <a href...

On peut très bien écrire directement :
::
   
 http://home.citycable.ch/windwaver/MesSources/

mais cela ne va pas ouvrir une nouvelle fenêtre dans le navigateur.

   
Commentaires
^^^^^^^^^^^^

- Pour commenter une ligne, mettre deux points et un espace.

- Pour commenter un bloc, mettre deux points et indenter le bloc en
  dessous.
  

Mettre en évidence une chose importante
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   .. warning::
      Mettre ici une chose importante
      
ce qui donne :

.. warning::
   Mettre ici une chose importante

::

   .. hint::
      Une chose moins importante

ce qui donne :      
      
.. hint::
   Une chose moins importante

   
+---------------+----------------+----------+
|Commande       |*Qui donne*     |*Couleur* |
+===============+================+==========+
|`.. warning::` |`'i' int32`     | Rouge    |
+---------------+----------------+----------+
|`.. note::`    |`note`          | Grise    |
+---------------+----------------+----------+
|`.. tip::`     |`Astuce`        | Grise    |
+---------------+----------------+----------+
|`.. caution::` |`Prudence`      | Grise    |
+---------------+----------------+----------+
|`.. error::`   |`Erreur`        | Grise    |
+---------------+----------------+----------+
|`.. hint::`    |`Indice`        | Grise    |
+---------------+----------------+----------+

  
Pour insérer du code à partir d'un fichier
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tapez le code suivant : ::

  .. literalinclude:: /IT/sources/exemple_graphique01.py

Ce qui donnera :

.. literalinclude:: /IT/sources/exemple_graphique01.py

		    
Pour insérer une vidéo
^^^^^^^^^^^^^^^^^^^^^^

Tapez le code suivant : ::
  
  .. raw:: html

      <iframe width="560" height="315"
      src="https://www.youtube.com/embed/UaIvrDWrIWM" frameborder="0"
      allowfullscreen></iframe>

Ce qui donnera :

.. raw:: html

      <iframe width="560" height="315"
      src="https://www.youtube.com/embed/UaIvrDWrIWM" frameborder="0"
      allowfullscreen></iframe>

Pour insérer des formules mathématiques
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Normalement, on peut inclure des maths avec ``:math:`code LaTeX```
ou alors avec ``.. math:: code LaTeX sur une seule ligne``

.. code-block:: rst
		
  .. math::

     a^2
     
Ce qui donne :

.. math::

   a^2

Création du document pdf
------------------------

1) à l'aide du prompt Anaconda se déplacer dans le répertoire du
   projet (où il y a le .rst) 
2) tapez ``make latexpdf`` cela va créer un répertoire latex dans le
   répertoire _build
3) ouvrir le fichier .tex dans le répertoire latex avec emacs
4) compiler
   

Divers liens utiles
-------------------

1) |lien3|

.. |lien3| raw:: html

   <a href="http://python.physique.free.fr/aide/Partie1.html"
   target="_blank">python.physique</a>

2) |lien4|

.. |lien4| raw:: html

   <a href="https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html"
   target="_blank">thomas-cokelaer</a>

3) |lien5|

.. |lien5| raw:: html

   <a href="http://www.sphinx-doc.org/en/master/usage/quickstart.html"
   target="_blank">sphinx-doc</a>

4) |lien6|

.. |lien6| raw:: html

   <a href="https://draft-edx-style-guide.readthedocs.io/en/latest/ExampleRSTFile.html#id15"
   target="_blank">draft-edx-guide</a>

5) |lien7|

.. |lien7| raw:: html

   <a href="https://www.complang.tuwien.ac.at/doc/python3-docutils/docs/ref/rst/restructuredtext.html"
   target="_blank">complang</a>

6) |lien8|

.. |lien8| raw:: html

   <a href="http://docutils.sourceforge.net/rst.html"
   target="_blank">docutils.sourceforge</a>

Java Script
===========

Coté client
-----------

Pour développer un script, il faut utiliser Visual Studio et
installer l'extension Live Server. Ensuite ouvrir le répertoire et
clique droite sur le fichier index.html qui contient le script et open 
with live server.

Pour que la page se rafraichisse automatiquement dans le browser, il 
faut mettre dans Visual Studio Code un délais à 600ms à Autosave.

Sever Side
----------

How to install node.js
^^^^^^^^^^^^^^^^^^^^^^

Without amin rights : 

https://medium.com/@github.gkarthiks/how-to-install-nodejs-and-npm-in-non-admin-access-windows-machines-102fd461b54c


install that so it doesn't need to restart the sever always:

- npm install -g nodemon

Then enter :

- nodemon index.js

.. _lienClasse:

Classes
-------

.. image:: /IT/sources/js/classes/Capture1.PNG
       :width: 300
       :align: center

.. image:: /IT/sources/js/classes/Capture2.PNG
       :width: 300
       :align: center

Nous retournera 4.

On peut réassigner des nouvelles valeurs :

.. image:: /IT/sources/js/classes/Capture3.PNG
       :width: 300
       :align: center

Ici le résultat sera de 3.

On peut aussi déclarer des fonctions dans nos class :

.. image:: /IT/sources/js/classes/Capture4.PNG
       :width: 300
       :align: center

.. image:: /IT/sources/js/classes/Capture5.PNG
       :width: 300
       :align: center	       

qui retounera : Loud Noise et 3

On peut passer une variable d'entrée Meow :

.. image:: /IT/sources/js/classes/Capture6.PNG
       :width: 300
       :align: center

Le résultat : Meow et 3

On peut aussi créer des static function :

.. image:: /IT/sources/js/classes/Capture7.PNG
       :width: 300
       :align: center

.. image:: /IT/sources/js/classes/Capture8.PNG
       :width: 300
       :align: center

On peut alors accéder à la fonction sans passer par une variable (let)

La fonction get permet de traiter notre objet comme une propriété.

.. image:: /IT/sources/js/classes/Capture9.PNG
       :width: 350
       :align: center

.. image:: /IT/sources/js/classes/Capture10.PNG
       :width: 300
       :align: center

voici le résultat :

.. image:: /IT/sources/js/classes/Capture11.PNG
       :width: 300
       :align: center

Admettons maintenant que nous voulions appliqué notre class à d'autre
animaux comme chien, souris et que ces animaux hérite la même classe.

.. image:: /IT/sources/js/classes/Capture12.PNG
       :width: 400
       :align: center

Ici Animal est la classe parent et Cat la classe enfant Cat aura
hérité toutes les propriétés de Animal et on aura mis une autre valeur
par défault à sound (meow).

Importons la class Cat

.. image:: /IT/sources/js/classes/Capture13.PNG
       :width: 300
       :align: center

et appelons cat.makeNoise()

Voici le résultat :

.. image:: /IT/sources/js/classes/Capture14.PNG
       :width: 400
       :align: center

Faisons un cat.metaData:

.. image:: /IT/sources/js/classes/Capture15.PNG
       :width: 300
       :align: center	       

Résultat :

.. image:: /IT/sources/js/classes/Capture16.PNG
       :width: 400
       :align: center
	       
React
-----

L'installation a réussi dans le répertoire xxxxx_y, dans le
répertoire formation cela échoue. Déplacer le répertoir où l'on veut
après. 

Pour compiler tapez : ::
  
  npm start
  

Pour nettoyer après installation rapide voir cette video :

https://www.youtube.com/watch?v=dMH1_YtUTSQ

Fichiers de base
^^^^^^^^^^^^^^^^

Il faut au minimum un fichier ``index.html`` et ``index.js``.

Contenu du fichier ``index.html`` :

.. literalinclude:: /IT/sources/js/react/index.html


Contenu du fichier ``index.js`` :

.. literalinclude:: /IT/sources/js/react/index.js

on remarque la ligne
::

   React from "react"

qui est là pour activer JSX, une combinaison entre html et js.
::
   
   <h1>Hello world!</h1>

est écrit en JSX.

Si l'on veut mettre plusieurs balise html comme ::

  <h1>Hello world!</h1><p>Ceci est un paragraphe</p>

nous devrons les inclure dans un un div ::

  <div><h1>Hello world!</h1><p>Ceci est un paragraphe</p></div>

ReactDOM & JSX
^^^^^^^^^^^^^^

https://www.youtube.com/watch?v=DLX62G4lc44&t=565s

Objective: Fill in the boilerplate React code required to render an
unordered list (<ul>) to the page. The list should contain 3 list
items (<li>) with anything in them you want.

HINTS:
import the libraries you need first
use one of the libraries to render some JSX to the page

https://www.youtube.com/watch?v=DLX62G4lc44&t=1472s


.. literalinclude:: /IT/sources/js/react/ReactDOM&JSXPractice/index.js

Functional Components Practice
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

https://www.youtube.com/watch?v=DLX62G4lc44&t=1234s

Objectives:

1. Set up the basic React code from scratch
2. Create a functional component called MyInfo that returns the
   following UI:
   
     a. An h1 with your name
     b. A paragraph with a little blurb about yourself
     c. An ordered or unordered list of the top 3 vacaton spots you'd
        like to visite
	
3. Render an instance of that functional component to the browser
   Extra challenge: learn on your own (Google) how you can add some
   style to your page.
   (We will also cover this in an upcoming lesson).


https://www.youtube.com/watch?v=DLX62G4lc44&t=1472s		     


.. literalinclude:: /IT/sources/js/react/FunctionalComponentsPractice/index.js

		    
Move Components into Seperate Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Il serait bien de mettre les composants dans un répertoire nommé
components.

.. image:: /IT/sources/js/react/MoveComponentsIntoSeperateFiles/structure.PNG
       :width: 200
       :align: center

Un fichier portant le même nom que le composant doit être créé.
Il devra comporter  import et export

.. literalinclude:: /IT/sources/js/react/MoveComponentsIntoSeperateFiles/MyInfo.js


Le fichier index devra importer ce fichier dans le répertoire où il se
trouve. Noter bien le Nom du composant est précédé par < suivi d'un
espace />.

.. literalinclude:: /IT/sources/js/react/MoveComponentsIntoSeperateFiles/index.js


https://www.youtube.com/watch?v=DLX62G4lc44&t=1781s


Parent/Child Components
^^^^^^^^^^^^^^^^^^^^^^^

https://www.youtube.com/watch?v=DLX62G4lc44&t=2107s

Voici une structure dont une page internet se définirait :

.. image:: /IT/sources/js/react/ParentChildComponents/structure.PNG
       :width: 500
       :align: center

Set up the React app from scratch
Render an App component (defined in a separate file)
Inside App, render:

1. A Navbar component
2. A MainContent component
3. A Footer component


https://www.youtube.com/watch?v=DLX62G4lc44&t=2594s

Voici arborescence des fichiers :

.. image:: /IT/sources/js/react/ParentChildComponents/structure2.PNG
       :width: 200
       :align: center   

Le fichier  index.js :

.. literalinclude:: /IT/sources/js/react/ParentChildComponents/index.js

Le composant App :

.. literalinclude:: /IT/sources/js/react/ParentChildComponents/App.js

Le composant Header :

.. literalinclude:: /IT/sources/js/react/ParentChildComponents/Header.js

Le composant MainContent :

.. literalinclude:: /IT/sources/js/react/ParentChildComponents/MainContent.js

Le composant Footer :

.. literalinclude:: /IT/sources/js/react/ParentChildComponents/Footer.js

Voici le résultat:

.. image:: /IT/sources/js/react/ParentChildComponents/result.PNG
       :width: 300
       :align: center

Todo App - Phase 1
^^^^^^^^^^^^^^^^^^

- From scratch, initialize the React app
- Render an <App /> component
- Create the <App /> component from scratch
- Have the <App /> component render 3 or 4 checkboxes with paragraphs
  or spans next to it like you are making a todo list with some
  hard-coded items on it

Le fichier index.js :

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase1/index.js

Le component App.js : 		    
		    
.. literalinclude:: /IT/sources/js/react/TodoApp-Phase1/App.js

Le résultat :

.. image:: /IT/sources/js/react/TodoApp-Phase1/result.PNG
       :width: 300
       :align: center

Styling React with CSS Classes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

On placera le fichier style.css à l'endroit suivant :

.. image:: /IT/sources/js/react/StylingReactWithCSS_Classes/structure.png
       :width: 300
       :align: center

Le fichier style.css :

.. literalinclude:: /IT/sources/js/react/StylingReactWithCSS_Classes/style.css	       

En JSX on doit utiliser className="..."

Le fichier Header.js :

.. literalinclude:: /IT/sources/js/react/StylingReactWithCSS_Classes/Header.js

Le résultat :

.. image:: /IT/sources/js/react/StylingReactWithCSS_Classes/result.PNG
       :width: 500
       :align: center
	       
JSX to JavaScript and Back
^^^^^^^^^^^^^^^^^^^^^^^^^^

Le code suivant n'affichera pas les variables firstName et lastName.

.. literalinclude:: /IT/sources/js/react/JSXtoJavaScriptAndBack/index.js

.. image:: /IT/sources/js/react/JSXtoJavaScriptAndBack/Capture.PNG
       :width: 300
       :align: center

Si l'on veut qu'à l'intérieur de JSX, du Java Script soit interprété,
il faudra faire l'usage d'accolades {}

.. literalinclude:: /IT/sources/js/react/JSXtoJavaScriptAndBack/index2.js

.. image:: /IT/sources/js/react/JSXtoJavaScriptAndBack/Capture2.PNG
       :width: 200
       :align: center		    

En ES6 cela donnera:

.. literalinclude:: /IT/sources/js/react/JSXtoJavaScriptAndBack/index3.js

Un autre exemple:

.. literalinclude:: /IT/sources/js/react/JSXtoJavaScriptAndBack/index4.js

Ce qui donnera:

.. image:: /IT/sources/js/react/JSXtoJavaScriptAndBack/Capture3.PNG
       :width: 300
       :align: center		    


	       
Inline Styles with the Style Property
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Si l'on veut mettre du style sur un h1 par exemple on mettra deux accolades
un pour dire que l'on est dans du java script et l'autre pour dire que
c'est un objet. Tous les noms qui ont un trait d'union devront être
modifiés : enlever les traits d'union et mettre une lettre majuscule
sur le nom qui venait après le trait d'union. Exemples
background-color devient : backgroundColor. Si la propriété n'a que
des chiffres on peut enlever les guillemets. Exemple : fontSize: 20
mais si on veut spécifier l'unité on remettra les guillements :
fontSize: "20px"

::

  <h1 style={{color:"#FF8C00"},{backgroundColor:}}> ... </h1>

Si beaucoup de style est appliqué, alors il peut être bien de noter
cela comme suit :


::
   
   const styles = {
     color: "#FF8C00",
     backgroundColor: "#FF2D00",
     fontSize: 20
   }
   return(
   <h1 style={styles}> ... </h1>
   ...
   )

L'inline Styles peut être intéressant lorsque l'on veut quelque chose
de dynamique. Prenons l'exemple fait plus haut.

.. literalinclude:: /IT/sources/js/react/InlineStylesWithTheStyleProperty/index.js

En testant à différentes heures

::

   const date = new Date(2020,12,16,1,13)


.. image:: /IT/sources/js/react/InlineStylesWithTheStyleProperty/Capture.PNG
       :width: 300
       :align: center

::

   const date = new Date(2020,12,16,7,28)


.. image:: /IT/sources/js/react/InlineStylesWithTheStyleProperty/Capture2.PNG
       :width: 300
       :align: center

::

   const date = new Date(2020,12,16,14,47)


.. image:: /IT/sources/js/react/InlineStylesWithTheStyleProperty/Capture3.PNG
       :width: 300
       :align: center

::

   const date = new Date(2020,12,16,21,16)


.. image:: /IT/sources/js/react/InlineStylesWithTheStyleProperty/Capture4.PNG
       :width: 300
       :align: center

Todo App - Phase 2
^^^^^^^^^^^^^^^^^^

Time to have fun styling! But first things first:

1. Change the input/p combo below to be a new component called
   <TodoItem />. <TodoItem /> (for now) will just have the same
   displayed data below (every todo item is the same) hardcoded inside
   of it. (We'll learn soon how to make the TodoItem more flexible)

2. Style up the page however you want! You're welcome to use regular
   CSS (in the CSS file) or inline styles, or both!   

   
Le component TodoItem :

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase2/TodoItem.js

Le component App :

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase2/App.js

Le fichier index.js :

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase2/index.js

Le fichier style.css :

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase2/style.css		    

		    
Le résultat :

.. image:: /IT/sources/js/react/TodoApp-Phase2/Capture.PNG
       :width: 500
       :align: center

On remarque que l'on a utiliser deux className qui ont été placé dans
la balise <div>.	       


Props in React
^^^^^^^^^^^^^^

Prenons un exemple d'une page qui a des parties similaires ici nous
avons des cartes de visite de chat (voir figure ci-dessous),
comportant chaqu'une une image un nom, un numéro de téléphone et un
email. Nous pouvons apparenté ces cartes de visite à des components
avec bien sur des données différentes comme les images, noms
etc... Vient ici la notion de Props qui sont en fait les différentes
données que l'on souhaite afficher dans la carte de visite. 

.. image:: /IT/sources/js/react/PropsInReact/Capture.JPG
       :width: 300
       :align: center


En codant les données "en dur" nous aurons pour le fichier App.js :

.. literalinclude:: /IT/sources/js/react/PropsInReact/App.js

On aura très vite compris que s'il y avait un grand nombre de carte le
fichier App.js deviendrait très grand.

En créant un component ContactCard nous pourrions simplement appeler
ce component dans App.js autant de fois qu'il y a de carte de visite.

Voici le component ContactCard (dans fichier nommé ContactCard.js) :

.. literalinclude:: /IT/sources/js/react/PropsInReact/ContactCard.js

et voici le component App (fichier App.js) :

.. literalinclude:: /IT/sources/js/react/PropsInReact/App2.js

		    
On remarque sur la figure suivante que les données des cartes de
visites sont toutes identiques. C'est là qu'il nous faut intégrer
Props dans nos components.

.. image:: /IT/sources/js/react/PropsInReact/Capture2.JPG
       :width: 300
       :align: center

A l'instar des functions recevant des variables d'entrée, les
component recevront les données en entrée.

Pour passer les données au component ContactCard, on procédera de la
manière suivante :

**Remarque:** on peut mettre les données toutes sur une ligne séparée 
d'un espace mais il est préférable de les indenter.

.. literalinclude:: /IT/sources/js/react/PropsInReact/App3.js

Pour utiliser les données dans le component ContactCard, il faudra
écrire ::

  function ContactCard(props){
  ...

  
A ce moment là les données sont passées au component ContactCard.
Vérifions avec un console.log :

.. literalinclude:: /IT/sources/js/react/PropsInReact/ContactCard2.js 

.. image:: /IT/sources/js/react/PropsInReact/Capture3.PNG
       :width: 500
       :align: center  

Etant donné que le component est appelé quatre fois, les quatres
objets avec leurs propriétés sont retournées.

Maintenant au lieu d'avoir les données codées en dur, mettons les
données à la place.

::

   <img src=props.imgURL/>

Ceci ne fonctionnera pas car nous sommes dans du JSX, il faut mettre
enre accolades pour que se soit interprété en JS.

::

   <img src={prop.imgURL}/>


Voici le fichier ContactCard.js:

.. literalinclude:: /IT/sources/js/react/PropsInReact/ContactCard3.js 


Admettons maintenant que la liste des contacts serait de 50, la liste
serait très longue à écrire. On peut alors paser un objet contact avec
ces propriétés:

::

   <ContactCard
      contact={{name: "Mr. Whiskerson", imgURL:
      "http://placekitten.com/300/200", phone: "(212) 555-1234"}}
      />

Notez bien la double accolade: une pour rentrer dans JS et l'autre
pour dire que c'est un objet. 

Les données passées ainsi ont bien meilleures allures, mais elles ne
seront jamais écrite dans ce fichier mais plûtot écrites dans un fichier
de données comme du JSON.

En passant cet objet contact, il nous faudra adapter le component
ContactCard:

.. literalinclude:: /IT/sources/js/react/PropsInReact/ContactCard4.js

		    
Props and Styling Practice
''''''''''''''''''''''''''

One LAST time in this course, set up a React app from scratch. Render
an <App /> component App should be in its oww file. App should render
5 <Joke /> components. Each Joke should receive a "question" prop and
a "punchLine" prop and render those however you'd like.

EXTRA CREDIT: Some jokes are only a punch line with no question: E.g.:
"It's hard to explain puns to kleptomaniacs because they always take
things literally." If you don't pass in a "question" prop, how might
you make it only show the punchline instead? Spend time practicing the
style of your Joke component.

Voici le fichier index.js:

.. literalinclude:: /IT/sources/js/react/PropsInReact/PropsAndStylingPractice/index.js 

Le fichier App.js:

.. literalinclude:: /IT/sources/js/react/PropsInReact/PropsAndStylingPractice/App.js

Le fichier Joke.js:

.. literalinclude:: /IT/sources/js/react/PropsInReact/PropsAndStylingPractice/Joke.js		    

On remarque l'utilisation de

::

  <br/>

pour insérer une ligne vide entre chaque joke. On aurait aussi pû
utiliser

::

  <hr/>

pour afficher une ligne de séparation  

On remarque où il n'y pas de question la marque Question:
subsiste. Pour faire disparaître ceci on utilisera la commande
suivante style et display:

::

   <h3 style={{display: props.question ? "block" : "none"}}>Question:
   {props.question}<h3/>

un autre moyen (plus difficile à comprendre:

::

   <h3 style={{display: !props.question && "none"}}> Question:
   {props.question}<h3/>

   
.. image:: /IT/sources/js/react/PropsInReact/PropsAndStylingPractice/Capture2.PNG
       :width: 300
       :align: center

et le fichier Joke.js:

.. literalinclude:: /IT/sources/js/react/PropsInReact/PropsAndStylingPractice/Joke2.js

En mettant une couleur grise aux réponses qui ne possèdent pas de
question:

.. literalinclude:: /IT/sources/js/react/PropsInReact/PropsAndStylingPractice/Joke3.js

.. image:: /IT/sources/js/react/PropsInReact/PropsAndStylingPractice/Capture3.PNG
       :width: 450
       :align: center		    

	       
Mapping Components
^^^^^^^^^^^^^^^^^^

Dans les exemples précédents, les données ont été codées en dur. La
plupart du temps les données affichées par React proviennent de
requêtes http par le biais d'API. Ces données sont stockées dans une
base de données qui sont ensuite exportée dans un fichier JSON. Comme
nous ne savons pas encore utiliser ces moyens, nous nous servirons des
données stockées dans un fichier sous forme d'un tableau.

Voici le fichier JokesData.js:

.. literalinclude:: /IT/sources/js/react/MappingComponents/JokesData.js

Ce tableau comporte des éléments qui sont des objets avec trois
propriétés : id, question et punchline.		    

On note la commande export default JokeData, pour que l'on puisse
utiliser les données dans App.js

Comment peut-on prendre les données d'un tableau et les convertir en
nombre de components? Nous allons utiliser une fonction d'ordre
supérieur dans un tableau. Qu'est que c'est que ça? prenons exemple :

.. image:: /IT/sources/js/react/MappingComponents/Capture.PNG
       :width: 300
       :align: center

nous pouvons réduire cette function en arrow function :

.. image:: /IT/sources/js/react/MappingComponents/Capture1.PNG
       :width: 300
       :align: center

Comme nous avons qu'un paramètre en entrée nous pouvons omettre les
parenthèses :

.. image:: /IT/sources/js/react/MappingComponents/Capture2.PNG
       :width: 300
       :align: center

Et comme une arrow function retourne dans tous les cas une valeur on
peut omettre le mot return et mettre tout sur une ligne.

.. image:: /IT/sources/js/react/MappingComponents/Capture3.PNG
       :width: 350
       :align: center

Et voici le résultat:

.. image:: /IT/sources/js/react/MappingComponents/Capture4.PNG
       :width: 500
       :align: center

	       
On remarque que cette function d'ordre supérieur applique sur tous les
éléments du tableau une multiplication par 2. On remarque aussi que
map ne modifie pas le tableau original. Il faut donc attribuer le
résultat à un nouveau tableau (ici doubled)	       

D'autre fonction d'ordre supérieur sont intéressantes à étudier comme
``filter`` et ``reduce``.

En appliquant le même raisonnement à notre tableau dataJokes. Ce que
nous souhaitons appliquer à tous les éléments de dataJokes, c'est
d'avoir une ligne comme ressemblant à ceci :

.. image:: /IT/sources/js/react/MappingComponents/Capture5.PNG
       :width: 500
       :align: center

et voici donc la commande map qui fait cela :

.. image:: /IT/sources/js/react/MappingComponents/Capture6.PNG
       :width: 500
       :align: center

Maintenant nous pouvons mettre ce tableau de components dans React et
JSX fait cela très bien!

.. literalinclude:: /IT/sources/js/react/MappingComponents/App.js

Et le résultat est identique. On déplore toutefois un avertissement :		    

.. image:: /IT/sources/js/react/MappingComponents/Capture7.PNG
       :width: 500
       :align: center

Ceci est dû au mappage du tableau. Il faut inclure une clé (key)
unique par élément. On aurait pû choisir key=question car on sait
qu'il n'y aura pas deux questions identiques. Le mot key doit
obligatoirement être choisi. Dans un fichier data, ily a souvent une
propriété id (qui est unique) utilisons-la pour notre tableau: 

.. image:: /IT/sources/js/react/MappingComponents/Capture8.PNG
       :width: 500
       :align: center

Et voici le fichier final de App.js:

.. literalinclude:: /IT/sources/js/react/MappingComponents/App2.js

Et le component Joke qui n'a pas bougé depuis l'exercie précédent :


.. literalinclude:: /IT/sources/js/react/MappingComponents/Joke.js


Commme déjà cité plus haut il y a plusieurs méthodes relatif au
tableau qui sont bons à voir ou à revoir (tapez MDN et la méthode dans
google):

- filter
- map
- sort
- reduce
- every
- some
- find
- findindex

Mapping Components Practice
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Given a list of products (as an array of objects, as seen in
vschoolProducts) render a <Product /> component (which you'll also to
create) for each product in the list.

Make sure to use the array's `.map()` method to create thes
components, and don't forget to pass a `key` prop to it to avoid the
warning.

Voici le fichier vschoolProducts.js:

.. literalinclude:: /IT/sources/js/react/MappingComponentsPractice/vschoolProducts.js

Normalement les données du tableau mappé devrait ressembler à ça:

.. image:: /IT/sources/js/react/MappingComponentsPractice/Capture.PNG
       :width: 500
       :align: center

c'est-à-dire que nous passions les propriétés de l'objet. On peut
aussi passer l'objet entier et sortir les propriétés dans le composant
enfant (ici Product)

Voilà le fichier App.js:

.. literalinclude:: /IT/sources/js/react/MappingComponentsPractice/App.js

*Remarque*: Quand on export des données d'un fichier ici du fichier
vschoolProducts.js nous l'exportons avec la commande suivante: export
default products, mais il est possible de l'importer avec un autre
nom: dans le fichier App nous l'importons avec le nom productsData
(import productsData from "./vschoolProducts"		    
	       
Et le fichier Product.js:

.. literalinclude:: /IT/sources/js/react/MappingComponentsPractice/Product.js

Pour afficher l'unité du prix, on s'est servi de la méthode string.

Le résultat final:

.. image:: /IT/sources/js/react/MappingComponentsPractice/Capture2.PNG
       :width: 300
       :align: center

	       
Todo App - Phase 3
^^^^^^^^^^^^^^^^^^

Let's practice props and mapping components on our todo list app:

I've created a js file with some todos data in it, which I'm imported
into this files. (Normally this data would come from an API call, not
a local file).

Challenge: Using the array map method, render a child component for
each todo item in the todosData array and pass the relevant data to
it.

L'exercice est très similaire à l'exercice précédent, j'exposerai
seulement les fichiers comme résultat. Sauf pour la partie case à
cocher, j'expliquerai comment coché avec la propriété checked.

Voici le fichier todosData.js:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase3/todosData.js

Voici le fichier index.js (rien de nouveau dans celui-ci):

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase3/index.js

Voici le fichier App.js:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase3/App.js

Attention de bien mettre key pour empêcher les doublons.		    

et le fichier TodoItem.js:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase3/TodoItem.js

On remarque l'utilisation de la propriété checked:

::

   <input type="checkbox" checked={props.item.completed} />


Pour afficher un vu suivant props.item.completd fixé par true ou false
dans le fichier todosData.js. Le navigateur affiche un message
d'erreur car cela fige la case à cocher (plus de possibilité de cocher 
ou de décocher manuellement). Mais cela va être résolut par la suite.

Class-based Components
^^^^^^^^^^^^^^^^^^^^^^

Si l'on veut approfondir avec React, on sera limité par l'utilisation
des Functional Component. C'est pourquoi nous allons utiliser les
Class-based Components. Pour l'instant nous allons introduire les
Class-based Components pour reproduire exactement ce que les fonctions
peuvent faire. Mais dans les prochaines leçons nous allons découvrir
que les Class-based Components peuvent faire bien plus, comme States,
Livecycle Methods. 

Découvrons maintenant comment convertir une Functional Component en
Class-based Component:

::

   import React from "react"

   function App() {
      return (
         <div>
	    <h1>Code goes here</h1>
	 <div>
      )
   }

pour une Class-based Component, il n'y pas de parenthèses commme pour
une Functional Component.

::

   class App extends React.Component


   export default App

Chaque Class-based Component à besoi d'au moin une méthode et cette
méthode est la méthode render et cela doit impérativement être écrit
de la cette manière :

::

   class App extends React.Component {
      render() {

      }
   }   

   export default App

 
La méthode render va retourner exactement la même chose que ce que
l'on a pour les Functional Components. Nous pouvons donc copier ce
qu'il y a dans dans return avec le mot return de la Functional
Component : 

 ::

   class App extends React.Component {
      render() {
         return (
            <div>
	       <h1>Code goes here</h1>
	    </div>
	 )   
      }
   }   

   export default App

   
Cette Class-based Component est identique à la Functional Component.

Voyons maintenant la méthode render(), à chaque fois que l'on désire
faire une logique d'affichage, comme par expemple l'exercice
d'affichage du texte en fonction de l'heure que l'on avait fait plus
haut, le code sera inséré après la méthode render() et avant return :

::
   
   class App extends React.Component {
      render() {
         const date = new Date();
         return (
            <div>
	       <h1>Code goes here</h1>
	    </div>
	 )   
      }
   }   

   export default App

L'inline styling pourra aussi y être placé.

On peut créé des méthodes après class et avant render() et les appeler
après la méthode render() avec this.yourMehodHere():

::
   
   class App extends React.Component {

      yourMethodeHere() {

      }
      
      render() {
         const style = this.yourMethodeHere()
         return (
            <div>
	       <h1>Code goes here</h1>
	    </div>
	 )   
      }
   }   

   export default App

Pour l'utilisation de props on fera précédé le mot props par this. :

::
   
   class App extends React.Component {

      yourMethodeHere() {

      }
      
      render() {
         return (
            <div>
	       <h1>Code goes here{this.props.whatever}</h1>
	    </div>
	 )   
      }
   }   

   export default App


En ayant l'habitude d'utiliser props dans des functional Component, on
oubliera vite le mot this. dans une Class-based Component.


Class-based Components Practice
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Pour cette exercice nous allons mettre tous les composants dans un
même fichier. Normalement, chaque composant est mis dans un fichier
séparé.

Challenge:

1. Convert all 3 components to be class-based
2. Fix the small bug

   
.. literalinclude:: /IT/sources/js/react/Class-basedComponentsPractice/index.js   

Pour convertir une Functional Component en Class-base Component :

1. Remplacer le mot function en class
#. Enlever les () après le nom de la fonction
#. Ecrire extends React.Component   
#. Ecrire render()
#. Si il y a du code pour styling, etc... le mettre juste après
   render()
#. Copier return et son contenu
#. Si il y a des props, mettre {this.props.whatever}

.. literalinclude:: /IT/sources/js/react/Class-basedComponentsPractice/index2.js

On voit qu'il y un message d'erreur 'props' is not defined. Ceci est
normal, car dans une class on doit utiliser this.props.whatever

Aussi, il faut passer les données à props

::

   <Header username="windwaver" />


Voici le code final:

.. literalinclude:: /IT/sources/js/react/Class-basedComponentsPractice/index3.js

Et le résultat:

.. image:: /IT/sources/js/react/Class-basedComponentsPractice/Capture.PNG
       :width: 350
       :align: center


State
^^^^^

Voilà, nous sommes arrivés au point le plus important de React. C'est
la compréhension de state. State est utilisé pour la gestion des
données. State permet de modifier les données. La différence entre
state et props c'est que les données passées à un autre component par
props ne peuvent être changées, elle sont immuables. State permet
cela.
On ne pourra par exemple jamais attribué une valeur à props comme par
exemple :

.. image:: /IT/sources/js/react/State/Capture.png
       :width: 350
       :align: center

	       
Chaque fois que l'on veut modifier une donnée on devra passer par
state. Et state ne peut être invoqué que par une Class-based
Component.

Pour introduire state dans une Class-based Component, il nous faut
écrire la méthode constructor() une ligne en dessous de class...
La méthode constructor() est issue du Java Script. Elle initialise la
class.

Pour se familiariser avec class voir :ref:`lienClasse` ou voir la
vidéo suivante : 

https://scrimba.com/p/p4Mrt9/cQnMDHD

Ensuite en dessous il nous faut écrire super() cette méthode à
pour but de tirer quelque goodies de React.Component. Un des goodies
est la méthode set state() que l'on verra plus loin.
En dessous de super() on mettra this.state = {} qui est un objet avec
une propriété que l'on peut appeler dans le Component.

Voici le fichier:

.. literalinclude:: /IT/sources/js/react/State/App.js

et le résultat :

.. image:: /IT/sources/js/react/State/Capture1.png
       :width: 300
       :align: center

Le this.state initialise notre state. Le fait particulier de state est
que l'on peut modifier sa valeur plus tard. On peut passer state à un
component enfant en invoquant props.

.. literalinclude:: /IT/sources/js/react/State/App2.js

Un truc cool avec state est quand on modifie la variable state tous
les composant utilisant sa valeurs vont être rafraîchit. Nous verrons
ceci plus tard avec la commande set state.		    

State Practice
^^^^^^^^^^^^^^

Challenge:

Given an incomplete class-based component without a constructor, add a
constructor and initialiye state to fix the brocken component.

.. literalinclude:: /IT/sources/js/react/StatePractice/App.js

.. literalinclude:: /IT/sources/js/react/StatePractice/App2.js		    


Et le résultat:		    
		    
.. image:: /IT/sources/js/react/StatePractice/Capture.PNG
       :width: 350
       :align: center
		    
State Practice 2
^^^^^^^^^^^^^^^^

Given a stateless functional component, add state to it. State should
have a property called `isLoggedIn` wich is a boolean (true if logged
in, false if not). Then, give your best shot at rendering the word
"in" if the user is logged in or "out" if the user is logged out.

.. literalinclude:: /IT/sources/js/react/StatePractice2/App.js		    

voici pour la première partie:

.. literalinclude:: /IT/sources/js/react/StatePractice2/App2.js

pour la dernière partie on utilisera du conditional
rendering. Attention de bien le placer entre render() et return() :

.. literalinclude:: /IT/sources/js/react/StatePractice2/App3.js

et le résulat :

.. image:: /IT/sources/js/react/StatePractice2/Capture.PNG
       :width: 300
       :align: center


.. image:: /IT/sources/js/react/StatePractice2/Capture2.PNG
       :width: 300
       :align: center

.. image:: /IT/sources/js/react/StatePractice2/Capture3.PNG
       :width: 300
       :align: center

.. image:: /IT/sources/js/react/StatePractice2/Capture4.PNG
       :width: 300
       :align: center	       

	       
Todo App - Phase 4
^^^^^^^^^^^^^^^^^^

In the previous iteration of this todo list app, we pulled in todos
data from a JSON file and mapped over it to display the todo items.
Eventually we'll want to be able to modify the data, which will only
happen if we've "loaded" the data in to the component's state

Challenge: Change the <App /> component into a stateful class
component and load the imported `todosData` into state.


.. literalinclude:: /IT/sources/js/react/TodoApp-Phase4/App.js

en changeant en class:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase4/App2.js


Handling Events in React
^^^^^^^^^^^^^^^^^^^^^^^^

Handling Events sont des événements tel que l'utilisateur déclenchera
quand il clique sur un élément ou passe la souris sur un élément.
Vous serez sûrement familié avec le language html qui est le suivant:

::

   <button onclick="myFunction()">Click me</button>


Avec React c'est presque la même chose: les événements sont repris du
Java Script, ils auront une majuscule.Ppour l'évémement de
ci-dessus cela deviendrait:

::

   onClick

Pour:

::

   onmouseover

cela devient:

::

   OnMouseOver

Ici quelques nom d'événement à réviser:

https://reactjs.org/docs/events.html#supported-events

Voici un code avec un bouton sans événement:

.. image:: /IT/sources/js/react/HandlingEventsInReact/Capture.PNG
       :width: 300
       :align: center

Administrons une fonction à l'événement onClick à ce bouton:

.. image:: /IT/sources/js/react/HandlingEventsInReact/Capture2.PNG
       :width: 400
       :align: center

et le résultat quant on clique sur le bouton:

.. image:: /IT/sources/js/react/HandlingEventsInReact/Capture3.PNG
       :width: 300
       :align: center	       

Ou en appelant la fonction déclarée séparément:

.. image:: /IT/sources/js/react/HandlingEventsInReact/Capture4.PNG
       :width: 400
       :align: center

Un petit exercice: en se référant à la page ci-dessous:

https://reactjs.org/docs/events.html#supported-events

trouver et écrire un événement lorsque le pointeur de la souris passe
sur l'image, un événement se déclenche. 

.. image:: /IT/sources/js/react/HandlingEventsInReact/Capture5.PNG
       :width: 400
       :align: center

.. image:: /IT/sources/js/react/HandlingEventsInReact/Capture6.PNG
       :width: 300
       :align: center	       

Il est clair que faire sortir le résultat d'un événement en
console.log n'est pas intéressante. En fait les événements pourront
modifié les state et c'est ce qui va faire une app très robuste.

Todo App - Phase 5
^^^^^^^^^^^^^^^^^^

Challenge: Get rid of our warning about not having an onChange on our
input. For now, the function that runs onChange can simply console.log
something.

Voici le code comme il était resté au dernier exercice:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase5/TodoItem.js

Voici la solution:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase5/TodoItem2.js

On remarque pour plus de clarté, on peut mettre à la ligne ce qu'il y
a entre <input .... et />


Changing State
^^^^^^^^^^^^^^

Voici le moment venu d'apprendre comment on change la valeur de state.
Prenons un exemple: un compteur (count) avec un bouton en dessous et
lorsque l'on clique sur le bouton cela va nous changer la valeur de
count.

.. image:: /IT/sources/js/react/ChangingState/Capture.PNG
       :width: 150
       :align: center

voici le code de départ:

.. literalinclude:: /IT/sources/js/react/ChangingState/App.js

Petit exercie que faut il mettre pour que quand on appuie sur le
boutton quelque chose apparaisse dans le console.log?

On doit rajouter un évenement onClick:

.. literalinclude:: /IT/sources/js/react/ChangingState/App2.js

Au lieu d'une arrow function (ici un fonction anonyme en ligne)
créons une méthode et déclarons-la au bon endroit. Pour savoir
où la déclarer, voici une explicaton sur les zones:

La partie render() est réservée pour les méthodes utilisée par
React, entre constructor() et render() on peut mettre autant de
méthodes que l'on veut.

Une forte convention que les gens ont, est de l'appeler handleClick
lorsque on l'associe à l'événement onClick. Attention de bien mettre
this.handlclick quand on appelle la méthode.

.. literalinclude:: /IT/sources/js/react/ChangingState/App3.js

Bon ceci est enuyeux, changeons maintenant la valeur de state (ici de
count).		    

Pour changer la valeur de count, on est tenté de changer directement
avec la commande suivante:

::

   handleClick(){
      this.state.count++
   }

Mais ceci ne se fait pas on ne change jamais la valeur originale de
state. On crée une nouvelle version de state. On peut apparenté ceci
aux habit que l'on porte. On ne changera pas la couleur de l'habit en
le peignant, on changera l'habit. Et c'est la même chose pour state.
Rappelons nous lorsque nous évoquons extends React.Component, il y
quelques goodies qui nous sont offerts comme la méthode setState(). A
chaque fois que l'on voudra changer state nous utiserons cette
méthode. Il y deux choses que l'on peut passer à cette méthode en
paramètre : prenons la plus simple, une nouvelle version de
state. State est un un objet et l'on peut passer un nouvel objet
comme ici :

::
   
   this.setState({count: 1})

nous arrivons à une erreur : à chaque fois que l'on crée une class
method, nous seront obligé de "bind" cette méthode à notre class. Si
vous n'êtes pas tout à fait familié avec "bind" ne vous en fait pas
trop. Sachez que chaque fois que vous faite une méthode avec setState,
il faudra la "binder" avec votre classe. Et le moyen de "binder" se
fait à l'intérieur de constructor().

::

   this.handleClick = this.handleClick.bind(this)

Ce que fait cette commande est d'assurer que la méthode handleClick
soit bound au contexte de this au travers de la classe.


.. literalinclude:: /IT/sources/js/react/ChangingState/App4.js

Résultat quand on click sur bouton la valeur passe de 0 à 1.

.. image:: /IT/sources/js/react/ChangingState/Capture2.PNG
       :width: 300
       :align: center

Lorsque l'on n'a pas besoin de connaître le résultat de la version
d'avant de state, l'assignation du nouveau objet fera l'affaire. Par
contre, lorsque l'on veut additioner 1 à count, il nous faut connaître
l'état précédent. Pour ce faire on fera passer une fonction :

::

   handleClick() {
      this.setState(prevState => {
         return {
	    count: prevState.count +1
	 }
      })
   }   

Résultat :
Lorsque l'on clique sur le bouton le compteur est incrémenter de 1.

.. image:: /IT/sources/js/react/ChangingState/Capture2.PNG
       :width: 300
       :align: center

Récapitulons :

.. literalinclude:: /IT/sources/js/react/ChangingState/App5.js

1) Nous avons:

   ::

     <h1>{this.state.count}</h1>

   qui affiche notre state ici la propriété count 
#) Cette propriété a été initialisée dans constructor

   .. image:: /IT/sources/js/react/ChangingState/Capture4.PNG
       :width: 300
       :align: center

#) On a ajouter un event onClick à notre button qui actionne notre
   méthode handleClick. Cette méthode a été crée dans la class App
  
   .. image:: /IT/sources/js/react/ChangingState/Capture5.PNG
       :width: 300
       :align: center

   .. image:: /IT/sources/js/react/ChangingState/Capture6.PNG
       :width: 300
       :align: center	       

#) Parce que la méthode handleClick utilise la méthode setState qui
   vient de extends React.Component, nous devons être sûr de "binder"
   dans constructor 

   .. image:: /IT/sources/js/react/ChangingState/Capture7.PNG
       :width: 300
       :align: center   
   
#) Une fois que la méthode handleClick a été "bindé", on peut utiliser
   la méthode setState pour soit attribué un objet pour créer une
   nouvel version de state (sans se préoccupé de la version
   précédente)

   .. image:: /IT/sources/js/react/ChangingState/Capture8.PNG
       :width: 300
       :align: center   
   
   , soit de passer une fonction qui passe le paramètre comme un objet
   de la version précédente et returne la nouvelle version après avoir
   utilisé la version précédente.

   .. image:: /IT/sources/js/react/ChangingState/Capture9.PNG
       :width: 300
       :align: center      	       

Cette partie de state est très importante à connaître car elle sera
utilisée souvent lors des prochaines leçons. Donc effacer tout le code 
et regarder si vous pouvez tout le refaire de tête. C'est le
meilleure moyens d'en prendre connaissance.


Todo App - Phase 6
^^^^^^^^^^^^^^^^^^

Dans cet exercice, nous allons modifier le code de notre Todo App de
telle façon que lorsque l'on clique sur une case à cocher, la case
sera cochée ou décochée. Nous allon en fait modifier le state.

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase6/App.js

Faisons cela dans un ordre quelquonque : toute d'abord faisons un
console.log à notre méthode handleChange :

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture.PNG
       :width: 500
       :align: center      	       

pour tester lorsqu'on clique sur une case l'id est bien affiché.
Maintenant, faisons les points 2. et 3. :

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture2.PNG
       :width: 500
       :align: center      	       

Donc le point 2, dit qu'il faut passer notre méthode handleChange à
notre composant TodoItem:

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture3.PNG
       :width: 500
       :align: center

et maintenant notre TodoItem reçoit notre méthode:
props.handleChange. Prenez note que la méthode prend id comme
paramètre et que OnChange reçoit une propriété event. Cela n'est pas
suffisant d'appeler notre props de cette manière :

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture4.PNG
       :width: 300
       :align: center

car onChange ne pas recevoir une propriété event, mais seulement un
objet event à la place.	       

on insérer une fonction qui émet une propriété event et qui appelle la
méthode handleChange avec comme paramètre props.item.id.

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture5.PNG
       :width: 400
       :align: center

Dans ce cas nous n'allons pas utiliser event on peut donc juste
l'effacer:

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture6.PNG
       :width: 400
       :align: center

Faisons un test en cliquant sur les cases à cocher on voit que l'id
correspondant s'affiche correctement:

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture7.PNG
       :width: 150
       :align: center

Voici le code complet de TodoItem.js:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase6/TodoItem.js

		    
Voilà les points 2 et 3 sont achevés. Occupons-nous d'actualisé notre
state : 	       

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture8.PNG
       :width: 500
       :align: center

Cette partie est la plus trickie. Nous devons nous occuper de l'entier
du tableau, car nous enregistrons notre tableau dans notre state et
nous ne voulons jamais changer notre state directement, nous ne
pouvons pas simplement changer l'élément du bon id en flippant sa
valeur de true à false ou vice versa car cela modifie la version
original de state. A l'opposé nous allons créer un nouveau tableau en
conservant tous les éléments à l'exception de l'élément qui passera de
true à false ou vice versa. Pour ce faire, nous allons utiliser la
méthode map car comme nous le savons déjà celle-ci retournera un tout
nouveau tableau.

Donc ce que l'on va d'abord faire c'est utiliser setState avec une
fonction pour conserver la version originale :
Nous allons utiliser map pour faire une boucle de notre tableau
original.

prevState.todos est notre ancienne version de todos. Nous allons
parcourir tous les éléments de ce tableau avec

::
   
   todo => {
     if (todo.id === id)}

et cet id est l'élément que l'on veut basculer.

ensuite nous allons retourner todo pour mettre ce nouveau tableau dans
updateTodos.

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture9.PNG
       :width: 500
       :align: center

encore un return pour assigner le nouveau tableau à la propriété todos
de l'objet.

   .. image:: /IT/sources/js/react/TodoApp-Phase6/Capture10.PNG
       :width: 500
       :align: center

Et voici le code complet de App.js:

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase6/App2.js

Le test a bien fonctionné en cliquant sur une case ça bascule bel et
bien. 

Lifecycle Methods Part 1
^^^^^^^^^^^^^^^^^^^^^^^^

Chaque component sous React possède en arrière plan des méthodes de
cycle de vie. Comme la vie humaine qui a une naissance, ..., et une
mort.
Tous les éléments React vont traverser des événements lorsqu'ils sont
rendus (rendered) et mis à jour. L'équipe de React a déprecié trois
Lifecycle methods. Au lieu de prendre chaqu'une des méthodes une à
une, nous allons présenter les méthodes les plus utilisées. Pour une
introduction plus complète à ces méthodes veuillez vous référer à ce
site:
https://engineering.musefind.com/react-lifecycle-methods-how-and-when-to-use-them-2111a1b692b1

et le site officiel de l'équipe React:

https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes


Conditional Rendering
^^^^^^^^^^^^^^^^^^^^^

Le Conditional Rendering peut être appliqué de beaucoup de façon
différentes. Proposons une façons dans le code suivant:

.. literalinclude:: /IT/sources/js/react/ConditionalRendering/App.js

Dans le code de ci-dessus, on a ajouté un state avec une propriété
isLoading à true. Ceci est souvent utilisé lors d'appel vers un API,
et pendant le chargement on veut afficher quelque chose pour dire
qu'il y a un processus en cours. Ainsi l'utilisateur n'aura pas
l'impression que l'app a crashé. Le Conditional Rendering intervient
là.
Nous avons un autre Component Conditional qui reçoit le props
isLoading avec la version courante de state : this.state.isLoading.
Dans Conditional nous allons ajouter ce que l'on veux afficher à
l'écran.

Rappelez-vous que la méthode componentDidMount() est une chance pour
nous d'écrire du code pour qu'il s'execute avant que notre Component
ici App s'execute à l'écran pour la première fois. Le code compris
dans componentDidMount est en fait un code qui simule une requête
API. Nous avons mis un délai de 1500 via la fonction setTimeout qui va
faire basucler la propriété isLoading à false.
Une fois que ça bascule à false, le component Conditional va recevoir
une nouvel prop, ce qui va réexuter la méthode render() ce qui va
faire à nouveau s'excuter le component Conditional qui est une functional
component et selon ce qui a dedans faire executer quelque chose
d'autre. Donc notre component Conditional va recevoir une nouvel
prop. Avant d'aller plus loin vérifions que notre component
Conditional fonctionne, en mettant un console.log(props.isLoading) :
ci-dessous le component Conditional:

.. literalinclude:: /IT/sources/js/react/ConditionalRendering/Conditional.js 

Lorsque l'on rafraîchit la page, true s'affiche tout de suite et 1.5s
plus tard false s'affiche.

Maintenant au lieu d'afficher Temp nous allons mettre une condition
qui affichera quelque chose de différent suivant la valeur de
isLoading.

.. literalinclude:: /IT/sources/js/react/ConditionalRendering/Conditional2.js

Le résultat est que ça affiche isLoading pendant 1.5s et ensuite Some
cool stuff...

Ce code utilise du pur Java Script avec if. On préférera réécrire ce
code de la façon suivante avec ce mode de conditionnement mais c'est
un choix personnel bien-sûr :

condition ? statement if true : statement if false

.. literalinclude:: /IT/sources/js/react/ConditionalRendering/Conditional3.js

Nous avons mis ce code dans un component Conditional, mais le meilleur
endroit pour mettre ce genre de code est dans le component App.
Car c'est dans la méthode render() qui est le plus approprié à dire
qu'un composant doit être executé ou pas.

Voici le code App.js et Conditional.js:

.. literalinclude:: /IT/sources/js/react/ConditionalRendering/App2.js
.. literalinclude:: /IT/sources/js/react/ConditionalRendering/Conditional4.js

		    
Conditional Rendering Part 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Un autre moyen que d'utiliser: condition ? statement if true :
statement if false est l'opérateur && (and):

Si à gauche de && est true alors ce qui est à droite est fait
(retourne false si à droite c'est false). Si à
gauche de && est faux alors ce qui est à droite est null ou n'est pas executé.

Prenons un exemple:

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPart2/App.js

.. image:: /IT/sources/js/react/ConditionalRenderingPart2/Capture.PNG
     :width: 350
     :align: center		    

Ce code affiche le nombre de message non lus. Quand il n'y pas de
message ce code affiche quand même quelque chose :

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPart2/App2.js

.. image:: /IT/sources/js/react/ConditionalRenderingPart2/Capture2.PNG
     :width: 350
     :align: center		    

Lorsqu'il n'y pas de message on ne souhaiterait pas non plus être
informé qu'il y 0 message (trop d'information tue
l'information). D'après ce que l'on vient de voir dans la leçon
précédente on peut écrire ceci comme cela:

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPart2/App3.js

.. image:: /IT/sources/js/react/ConditionalRenderingPart2/Capture3.PNG
     :width: 350
     :align: center

Qui n'affiche rien quand il y a zéro message.

On peut grâche à l'opérateur && réduire ce code comme cela:

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPart2/App4.js

.. image:: /IT/sources/js/react/ConditionalRenderingPart2/Capture4.PNG
     :width: 350
     :align: center

qui a le même résultat qu'avant.

En mettant trois messages on remarque que le message réapparaît avec
trois messages non lus. 

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPart2/App5.js

.. image:: /IT/sources/js/react/ConditionalRenderingPart2/Capture5.PNG
     :width: 350
     :align: center

	     
Conditional rendering Practice
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPractice/App1.js

Hints:

Pour faire cet exercice, il nous faudra en 1) un class-base component
et une méthode constructor. En 2) Il faudra un state avec une
propriété d'objet booléene, appelons-là isLoggedIn (true or
false). En 3) on ajoutera un even listener (onClick) et pour l'extra
challenge on utilisera du Conditional Rendering. On appliquera aussi
du Conditional Rendering au point 4).

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPractice/App2.js

Pour commencer il nous faut un class-based component car nous devons
utiliser state. On remplace function par App et on enlève les
parenthèses. Etant donné qu'il nous faudra introduire state nous
devrons avoir la méthode constructor() suivi de super(). On initialise
state qui est un objet avec une propriété isLoggedIn.

Donc voici pour les points 1) et 2)

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPractice/App3.js

Maintenant nous devons ajouter un bouton. Ensuite on ajoute un event
listner pour permettre à notre button d'effectuer une action. Une
méthode de classe nommée this.handClick est attribué à l'event
listner. Créons la méthode de classe handlClick. "Bindons" la dans
constructor(). Avant d'aller plus loin, il est bien de contrôler que
tout fonctionne jusque là. Mettons un console.log pour vérifier cela:

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPractice/App4.js

et le résultat affiche bien ce que l'on veut quand on clique sur le
bouton.

.. image:: /IT/sources/js/react/ConditionalRenderingPractice/Capture.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/ConditionalRenderingPractice/Capture2.PNG
     :width: 350
     :align: center

Ce que l'on souhaite maintenant faire c'est de basculer la propriété
isLoggedIn à true ou false suivant la donnée courante. On utilise
setState pour ce faire, et comme on veut définir state en fonction de
la valeur précédente, on utilisera une function. Pour afficher la
nouvelle valeur de state on placera dans le render() le texte sur le
bouton égale à l'inverse de isLoggedIn. On placera aussi un autre
texte suivant que l'on est connecté ou pas. Pour placer ces textes on
fera usage du Conditional Rendering : 

.. literalinclude:: /IT/sources/js/react/ConditionalRenderingPractice/App5.js

Et le résultat:		    

.. image:: /IT/sources/js/react/ConditionalRenderingPractice/Capture3.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/ConditionalRenderingPractice/Capture4.PNG
     :width: 350
     :align: center

On voit bien que lorsque on clique sur le bouton l'état change
impéccablement et le texte aussi.

Todo App - Phase 7
^^^^^^^^^^^^^^^^^^

Reprenons notre exercice de Todo. Dans cette exercice nous allons
appliquer un style lorsque la tâche a été effectuée. Comme mettre la
ligne en italique, grisée, et biffée.

On utilise pour cela du inline styling. En fonction de la valeur de
props.item.completed on choisira d'appliquer le style ou non. Voici le
code :

.. literalinclude:: /IT/sources/js/react/TodoApp-Phase7/TodoItem.js

Et un screenshot pour montrer le résultat :

.. image:: /IT/sources/js/react/TodoApp-Phase7/Capture.PNG
     :width: 350
     :align: center

	     
Fetching data from an API
^^^^^^^^^^^^^^^^^^^^^^^^^

Voici un lien pour l'explication de la comande fetch :

https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch

La commande fetch renvoie une promise. Pour l'explication de promise
voir le site suivant:

https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261

Dans cet exemple nous allons capturer les données de personnages du
film Star Wars. Un site existe et se trouve à l'adresse suivante:

https://swapi.dev


.. literalinclude:: /IT/sources/js/react/FetchingDataFromAnAPI/App1.js

.. image:: /IT/sources/js/react/FetchingDataFromAnAPI/Capture.PNG
     :width: 500
     :align: center		    
		    
Pour enregistrer les données reçue par fetch nous allons les mettre
dans state.

Voici le code pour ce faire:

.. literalinclude:: /IT/sources/js/react/FetchingDataFromAnAPI/App2.js

Et le résultat:

.. image:: /IT/sources/js/react/FetchingDataFromAnAPI/Capture2.PNG
     :width: 350
     :align: center

Pour informer l'utilisateur que les données sont en cours de
téléchargement on peut écrire un message d'information avec le code
suivant:

.. literalinclude:: /IT/sources/js/react/FetchingDataFromAnAPI/App3.js

Le téléchargement est ici tellement rapide que l'on a à peine le temps
de voir loading. Mais cela s'affiche correctement.

Forms Part 1
^^^^^^^^^^^^

Un peu de théorie avant de se plonger dans le vif du sujet:

https://reactjs.org/docs/forms.html


La saisie dans un formulaire avec React déclenche un événement
onChange qui modifie state après chaque caractère saisi. Pour
illustrer ceci faisons un exemple d'une simple saisie d'un input.


.. literalinclude:: /IT/sources/js/react/FormsPart1/App1.js

Pour voir chaque changement dans cette input box, on mettra un
déclencheur onChange dans input box. Donc chaque fois que l'on
changera la saisie dans l'input box on activera une fonction.
Le but étant de changer state à chaque caractère saisi. Donc on doit
prendre la valeur de input box et la passer à state. Pour l'instant
state n'a pas de propriété à changer, mettons en un maintenant.

.. literalinclude:: /IT/sources/js/react/FormsPart1/App2.js

Etant donné que l'on ne se soucie pas de la valeur précédente de state
on instanciera state de la manière suivante:

.. image:: /IT/sources/js/react/FormsPart1/Capture.PNG
     :width: 250
     :align: center
		    
et que doit-on mettre à la place des points d'interrogation?
On sait que lors de déclenchement d'événement il y des paramètre
prédéterminés qui sont transmis à la fonction. Nous allons donc mettre
le paramètre event à notre fonction:

.. image:: /IT/sources/js/react/FormsPart1/Capture2.PNG
     :width: 250
     :align: center

On trouve des informations importantes dans le paramètre event. Par
exemple, on peut accéder à la valeur de notre input box.	     

.. image:: /IT/sources/js/react/FormsPart1/Capture3.PNG
     :width: 350
     :align: center

event.target représente la source de l'événement déclenché ici c'est
l'input box. Donc notre state est vraiment le reflet de la valeur
saisie de notre input box.

pour voir la valeur de state mettons un h1 pour voir le résultat:

.. image:: /IT/sources/js/react/FormsPart1/Capture4.PNG
     :width: 350
     :align: center

On voit que rien de s'affiche. C'est parce que nous n'avons pas binder
notre handleChange. Il faut mettre la commande suivante dans le
constructor()

.. image:: /IT/sources/js/react/FormsPart1/Capture5.PNG
     :width: 350
     :align: center

Et maintenant on voit que ça fonctionne:

.. image:: /IT/sources/js/react/FormsPart1/Capture6.PNG
     :width: 350
     :align: center

Maintenant au lieu d'avoir qu'une seule valeur dans notre formulaire,
mettons en plusieurs:

.. literalinclude:: /IT/sources/js/react/FormsPart1/App3.js

.. image:: /IT/sources/js/react/FormsPart1/Capture7.PNG
     :width: 350
     :align: center

Le résultat n'est pas vraiment satisfaisant car il efface First Name
dès que l'on commence à tapez quelque chose dans Last Name.	     

Pour parer à celon nous pourrions très bien faire une fonction pour
chaque entrée d'un formulaire comme par exemple
handleChangeLastName. Mais cela ne sera pas très simple lorsque le
formulaire aura beaucoup de champs.

Au lieu de cela nous n'allons pas coder en dur firstName ici:

.. image:: /IT/sources/js/react/FormsPart1/Capture8.PNG
     :width: 350
     :align: center

Mais donner un nom de propriété à notre input box:

.. image:: /IT/sources/js/react/FormsPart1/Capture9.PNG
     :width: 350
     :align: center

et aussi apporter le changement suivant à notre fonction
handleChange():

.. image:: /IT/sources/js/react/FormsPart1/Capture10.PNG
     :width: 350
     :align: center

On voit que ça fonctionne bien:

.. image:: /IT/sources/js/react/FormsPart1/Capture11.PNG
     :width: 350
     :align: center

Encore une chose pour améliorer on ajoute value à notre input box:

.. image:: /IT/sources/js/react/FormsPart1/Capture12.PNG
     :width: 350
     :align: center

et lorsque la ligne devient longue on peut mettre chaque attribut sur
une ligne :

.. image:: /IT/sources/js/react/FormsPart1/Capture13.PNG
     :width: 350
     :align: center

De cette manière on force la value à ce qu'est state.


Une autre chose pour simplifier le déboggage et pour rendre plus
lisible le code:

.. image:: /IT/sources/js/react/FormsPart1/Capture14.PNG
     :width: 350
     :align: center	     

Et pour clore cette section le code de App.js en entier:

.. literalinclude:: /IT/sources/js/react/FormsPart1/App4.js

Forms Part 2
^^^^^^^^^^^^

Nous allons introduire maintenant les différents éléments utiles que
peuvent contenir les éléments de formulaires qui sont: 

- <textarea /> element
- <input type="checkbox" />
- <input type="radio" />
- <select> and <option> elements

textarea
''''''''

En html, textarea n'a pas de self closing tag comme input mais
comporte un closing tag:

::
   
   <textarea></textarea>
   

.. image:: /IT/sources/js/react/FormsPart2/Capture.PNG
     :width: 350
     :align: center	        

Que l'on peut étendre dans la page web. L'utilisateur a aussi la
possibilité de mettre un largeur et un hauteur fixe.

En React, il n'y a pas de closing tag. Ca reprend la même philosophie
que input et est plus consistent.

.. image:: /IT/sources/js/react/FormsPart2/Capture1.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/FormsPart2/Capture2.PNG
     :width: 350
     :align: center	     	     

input type= checkbox
''''''''''''''''''''

Il n'y pas de propriété value comme utilisé avec type text ou
textarea. Il faut penser que sa propriété est checked ou pas. Cela
veut dire que l'on va mettre un propriété checked:

.. image:: /IT/sources/js/react/FormsPart2/Capture3.PNG
     :width: 350
     :align: center	     	     

Et ceci va faire entrer la notion d'une propriété Bolean. Donc
checkbox maintiennent des valeurs booléennes dans state. Pour
l'exemple, mettons:

.. image:: /IT/sources/js/react/FormsPart2/Capture4.PNG
     :width: 350
     :align: center	     	     

Déclarons cette valeur dans state:

.. image:: /IT/sources/js/react/FormsPart2/Capture5.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/FormsPart2/Capture6.PNG
     :width: 350
     :align: center	     	     	     

On remarque que la page ne nous permet pas de déchecké. Ceci est
normal car nous avons mis la propriété à true par state. Pour pouvoir
être en mesure de déchecker on va rajouter la propriété onChange et un
name:

.. image:: /IT/sources/js/react/FormsPart2/Capture7.PNG
     :width: 350
     :align: center

et mettons un peu en forme:

.. image:: /IT/sources/js/react/FormsPart2/Capture8.PNG
     :width: 350
     :align: center

Maintenant la partie tricky: dans une input box on trace ce qui à été
tapez. Rappelez vous dans le handleChange on traçait par value pour la
mise à jour de state. Dans une check box il n'y a pas de value mais
une propriété checked et cette propriété va retourner soit vraie ou
false. Ce que nous aurons besoins pour maintenir notre handleChange,
c'est savoir si notre élément de notre formulaire est une checkbox ou
pas. Nous devrons tirer de event.target le type et checked:

.. image:: /IT/sources/js/react/FormsPart2/Capture9.PNG
     :width: 350
     :align: center

Parce que une checkbox n'a pas value nous ne pourrons pas executer le
code:

.. image:: /IT/sources/js/react/FormsPart2/Capture10.PNG
     :width: 350
     :align: center

mais nous voudrons changer [name] qui est friendly et lui assigner la
valeur checked:

.. image:: /IT/sources/js/react/FormsPart2/Capture11.PNG
     :width: 500
     :align: center

Et là nous pouvons déchecker:


.. image:: /IT/sources/js/react/FormsPart2/Capture12.PNG
     :width: 350
     :align: center

Pour enlever le warning pour textarea mettons aussi un handleChange: 

.. image:: /IT/sources/js/react/FormsPart2/Capture13.PNG
     :width: 350
     :align: center

	     
radio button
''''''''''''

Les bouton radio sont une combinaison entre input type text et input
type check box. Ce que l'on entend par là c'est qu'il va utiliser la
propriété value et la propriété checked.

Construisons deux boutons radios un pour female et un autre pour male: 

.. image:: /IT/sources/js/react/FormsPart2/Capture14.PNG
     :width: 350
     :align: center

On remarque que lorsque que Is friendly n'est pas coché on ne peut pas
activer ni pour Male ni pour Female. Ceci est dû au fait que l'on a
repris le state de isFriendly. Se qui provoque des comportemenents
étranges. Mettons à la place:

.. image:: /IT/sources/js/react/FormsPart2/Capture15.PNG
     :width: 350
     :align: center

Et déclarons:

.. image:: /IT/sources/js/react/FormsPart2/Capture16.PNG
     :width: 350
     :align: center

Voici le résultat:

.. image:: /IT/sources/js/react/FormsPart2/Capture17.PNG
     :width: 350
     :align: center

Le programme enregistre ces valeurs que l'on peut illustrer:

.. image:: /IT/sources/js/react/FormsPart2/Capture18.PNG
     :width: 350
     :align: center

et le résultat:

.. image:: /IT/sources/js/react/FormsPart2/Capture19.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/FormsPart2/Capture20.PNG
     :width: 350
     :align: center	     

Il est claire que du premier abord ceci paraît bien compliqué, ceci
n'a pas lieu d'être mémorisé, il suffit de reprendre des exemples. Il
existe un librairie Formik facilitant la tâche.

select box
''''''''''

React heureusement maintient la propriété value par exemple si l'on
veut une liste de notre couleur préférée:

.. image:: /IT/sources/js/react/FormsPart2/Capture21.PNG
     :width: 350
     :align: center

La valeur que l'on choisira dans option sera transmise à
state.favColor

Déclarons cette propriété dans state:

.. image:: /IT/sources/js/react/FormsPart2/Capture22.PNG
     :width: 350
     :align: center

mettons aussi handleChange et name pour être sûr que ça coïncide avec
notre propriété de state, les valeurs de options doivent être
remplies:

.. image:: /IT/sources/js/react/FormsPart2/Capture23.PNG
     :width: 350
     :align: center

et le résultat:	     

.. image:: /IT/sources/js/react/FormsPart2/Capture24.PNG
     :width: 350
     :align: center	     

Ce qui cool avec react c'est que tout les éléments peuvent être
activés par une seule fonction handlChange. Check box doit juste être
testée avec une condition if (ou ? ... : ...).

Pour le summit button, html5 gère ça très bien: quand il trouve button
dans un form il l'associera automatiquement à un summit button. Dès
que l'utilisateur appuiera sur ce bouton l'événment onSumit du
formulaire sera déclenché.

Voici le app.js:

.. literalinclude:: /IT/sources/js/react/FormsPart2/App.js

Forms Practice
^^^^^^^^^^^^^^

Voici un exercice sur les Forms: la consigne se trouve à l'intérieur
du fichier Apps.js

.. literalinclude:: /IT/sources/js/react/FormsPractice/App.js

Il y plusieurs manières d'aborder cet exercice.
Tout d'abord nous allons initialiser tout ce qu'il y a à l'intérieur
de state:


**Remarques:**

La propriété age mettons-la à 0 pour l'instant.
La location sera sous la propriété destination.
Une check box pour dietaryRestrictions. Il y aura en fait plusieurs
check boxes car on peut très bien être allergique à plusieurs
ingrédients. C'est pourquoi nous l'initialiserons avec un tableau. 

.. image:: /IT/sources/js/react/FormsPractice/Capture.PNG
     :width: 350
     :align: center

Maintenant que nous avons initialisé ce qu'il y a dans state, nous
allons remplir les éléments existant dans les input donnée dans le
fichier Apps.js faisant office de consigne.

Nous savons que nous aurons besoin d'une propriété name pour chaque
input et d'une value déterminée par state (this.state.???). Chaque
input sera aussi sujet au changement (onChange=...) qui appellera
probablement handleChange. Attention les trois figures suivantes le
nom de handChange a mal été orthographié, c'est en fait handleChange.

.. image:: /IT/sources/js/react/FormsPractice/Capture2.PNG
     :width: 500
     :align: center

Pour plus de lisibilité mettons cela sur plusieurs lignes:

.. image:: /IT/sources/js/react/FormsPractice/Capture3.PNG
     :width: 350
     :align: center

Attribuons maintenant à name les propriétés de state respectivement,
complétons aussi this.state. ... avec les mêmes noms:

.. image:: /IT/sources/js/react/FormsPractice/Capture4.PNG
     :width: 350
     :align: center

Avant que nous poursuivons par rajouter des éléments, occupons-nous de
handleChange et ne pas oublier le bind:

.. image:: /IT/sources/js/react/FormsPractice/Capture5.PNG
     :width: 350
     :align: center

Descendons maintenant pour voir si ces trois inputs fonctionnenet
correctement:

.. image:: /IT/sources/js/react/FormsPractice/Capture6.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/FormsPractice/Capture7.PNG
     :width: 350
     :align: center	     

Jusque-là tout à l'air fonctionner mais essayer d'initialiser la
propriété age à null et le navigateur grogne. Mettons la à un empty
string est ça a l'air mieux.

Occupons-nous de notre gender, il est bien de le mettre entre un
label.
On se rappelle radio button possède une value, name et une propriété
checked. Et celui-ci est un peu tricky lorsque celui-ci est male alors
il sera checked.   

.. image:: /IT/sources/js/react/FormsPractice/Capture8.PNG
     :width: 350
     :align: center

Copions ce bribe de code pour female:

.. image:: /IT/sources/js/react/FormsPractice/Capture9.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/FormsPractice/Capture10.PNG
     :width: 350
     :align: center

Parfait on peut sélectionner male ou female.

Mettons encore ceci à l'affichage de gender.

Occupons-nous de select box pour Destination.

select box contiendra 4 options car ce n'est pas une grande compagnie
aérienne.

Chaque option prendra une propriété value. Les valeurs de nos options
sont en fait les valeurs que state devrait être si une de ces options
a été choisie. Ce sont en fait nos différentes locations. Mettons ces
valeurs en minuscule pour que l'on soit consistent avec le reste. La
valeur value de select est la valeur choisie. Et comme les autres,
soyons sûr qu'il comporte un name qui match avec la propriété dans
state. Et comme d'habitude onChange. Et dans la partie display on met
la destination.

.. image:: /IT/sources/js/react/FormsPractice/Capture11.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/FormsPractice/Capture12.PNG
     :width: 350
     :align: center

On remarque que Germany est affiché dans la liste par défault et que
dans le display il ne s'affiche pas. Pour en fait sélectionner Germany
il faudra d'abord sélectionner un autre pays et séléctionner
Germany. Pour parer à ce défaut, on affichera par défault un autre
texte:

.. image:: /IT/sources/js/react/FormsPractice/Capture13.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/FormsPractice/Capture14.PNG
     :width: 350
     :align: center

Ok, nous avons gardé le plus difficile pour la fin et c'est nos
checked box. Souvenons-nous lors de l'initialisation de nos propriété
de state, nous avions mis un tableau vide pour dietaryRestrictions. En
fait il sera plus facille de créer un sous objet et une valeur
booléene pour chaque dietaryRestriction.

.. image:: /IT/sources/js/react/FormsPractice/Capture15.PNG
     :width: 350
     :align: center

Nous aurons donc trois check boxes. Englobons check box dans un
label. type sera à "checkbox", name à la valeur de notre propriété de
state comme isVegan, onChange l'événement déclenchant handleChange,
checked qui sera égal à une propriété nested. Le text de label sera
Vegan? Copions ceci et remplaçons avec les autres restrictions
culinaires.

.. image:: /IT/sources/js/react/FormsPractice/Capture16.PNG
     :width: 350
     :align: center

Vous noterez que nous ne sommes pas en mesure de checker ces
checkboxes. Les checkbox n'a pas de propriété value et handleChange ne
peut modifier que les propriétés value. Nous devons d'abord contrôler
si le type une checkbox, donc nous devons tirer de event: type et
checked. On ne peut pas simplement dire que ``[name]: checked``, car
nous avons choisi d'avoir un nested object. Pour une raison que je ne
saurai expliquer le concept de nested object doit être oublié. Mais
peut être une piste pourquoi ça ne marche pas c'est peut-être dû au
fait que changer un nested object les autres propriété de state ne se
mettent pas à jour. Comme workaround nous allons supprimé notre
subobject : dietaryRestrictions. Et mettre chaque élément comme une
propriété de state. 

.. image:: /IT/sources/js/react/FormsPractice/Capture17.PNG
     :width: 350
     :align: center

et modifions encore:

.. image:: /IT/sources/js/react/FormsPractice/Capture18.PNG
     :width: 350
     :align: center

et là ça a l'air de marcher:

.. image:: /IT/sources/js/react/FormsPractice/Capture19.PNG
     :width: 350
     :align: center

Complétons encore le display:

.. image:: /IT/sources/js/react/FormsPractice/Capture20.PNG
     :width: 350
     :align: center

On remarque que lorsque l'on coche restriction, React n'affiche pas de
boléen.

.. image:: /IT/sources/js/react/FormsPractice/Capture21.PNG
     :width: 350
     :align: center

On peut écrire le code suivant pour une bon affichage:

.. image:: /IT/sources/js/react/FormsPractice/Capture22.PNG
     :width: 350
     :align: center

et le résultat final :

.. image:: /IT/sources/js/react/FormsPractice/Capture23.PNG
     :width: 350
     :align: center

.. literalinclude:: /IT/sources/js/react/FormsPractice/App1.js
		    
	     
Container/Component Architecture
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Notre exemple d'avant possède beaucoup de ligne et il est pas facile
de trouver la bonne ligne. On voit qu'une partie s'occupe de la
display logique en particulier ce qu'il y dans le render. Une autre
partie contient les state et le business logique comme
handleChange. Il serait très judicieux de segmenter notre code en
partie comme la UI logique ou la rendering Logique et la Business
logique qui en fait commande  la rendering Logique. Le but c'est
d'avoir un component qui maintient state et la méthode qui update
state et un autre component dédié à UI logique ou presentation logique
appelé presentational component. Qui aura la seule tache de recevoir
props pour un affichage correcte.

Un petit lien pour lire:

https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0

Analysons maintenant le code vu précédemment. Tout notre code est
maintenu dans un seul composant App. En réalité on veut que notre App
render notre form et que form fasse tout les formy things.
Créons un nouveau component appelé Form.js et copions tout le contenu
de App.js dans Form.js. Changeons le nom App en Form et export default
Form. Revenons dans App.js et importons Form. Comme Form s'occupe au
rendu de notre formulaire on peut en faire un functional component.

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture1.PNG
     :width: 350
     :align: center

Et l'on voit que notre app fonctionne toujours. On se rappelle que App
est comme une table des matières comportant par exemple un header,
main et un footer.

Pour l'instant nous avons tout dans Form. Nous allons créer un nouveau
component appelé FormComponent.js Pour plus de consistence renommons
Form.js en FormContainer.js et updatons App.js avec ce nom.

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture2.PNG
     :width: 350
     :align: center

Dans le FormContainer coupons tout la render logique. Ensuite dans le
component FormComponent rajoutons:

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture3.PNG
     :width: 350
     :align: center

et copions en-dessous ce que nous avons coupé.	     

On remarque que l'app ne fonctionne plus c'est parce que nous avons
coupé ce que qu'il y avait dans un class component dans un functionnal
component.

Nous avons ``this.state.firstName`` et ``this.handleChange`` cette
functionnal component n'a pas de handleChange méthode et n'a pas de
state. En fait elle va recevoir tout par props. Nous reviendrons dans
une minute pour fixer cela.

Dans notre FormContainer nous avons maintenant un render() vide. Ce
que nous allons faire c'est que FormContainer dedicate tout le UI
stuff au FormComponent. Donc à l'entente nous allons importer
FormComponent. Et render simplement <FormComponent />

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture4.PNG
     :width: 350
     :align: center

Bien entendu nous devrons faire passer tout un tas de props. Mais déjà
nous pouvons voir que la structure est devenue plus simple. Donc nous
devons faire passer state et handleChange. Passons d'abord
handleChange :

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture5.PNG
     :width: 350
     :align: center

Maintenant dans le composant FormComponent partout où il y
``this.handleChange`` nous devons le remplacer par
``props.handleChange``. 

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture6.PNG
     :width: 350
     :align: center

Pour state nous pourrions passez tout les propriétés par
``firstName={this.state.firstName`` etc... mais cela va rajouter plein
de ligne à la suite de ``<FormComponent``. Une autre option qui
s'offre à nous est d'utiliser un objet appelé ``data={this.state}``

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture7.PNG
     :width: 350
     :align: center

	     
et modifions FormComponent:

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture8.PNG
     :width: 350
     :align: center

remettons return() car nous l'avions couper dans FormContainer et
rajouter dans FormComponent: import React	     

Et l'app refonctionne.

Voici le fichier App.js:

.. literalinclude:: /IT/sources/js/react/ContainerComponentArchitecture/App.js

Voici le fichier FormContainer.js:

.. literalinclude:: /IT/sources/js/react/ContainerComponentArchitecture/FormContainer.js

Voici le fichier FormComponent.js:

.. literalinclude:: /IT/sources/js/react/ContainerComponentArchitecture/FormComponent.js

.. image:: /IT/sources/js/react/ContainerComponentArchitecture/Capture8.PNG
     :width: 350
     :align: center

Meme Generator Capstone Project
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create the boilerplate to get React to render something on the screen
Render an <App /> component, which you'll need to create separately

Voici le fichier index.js:

.. literalinclude:: /IT/sources/js/react/MemeGeneratorCapstoneProject/index.js

Voici le fichier App.js:

.. literalinclude:: /IT/sources/js/react/MemeGeneratorCapstoneProject/App.js

Create 2 new components - Header and MemeGenerator Header will only
display things MemeGenerator will be calling to an API and holding on
to data Each should be in their own file of the same name. 


.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture1.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture2.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture3.PNG
     :width: 350
     :align: center	     

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture4.PNG
     :width: 350
     :align: center	     

Commençons à changer le header:

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture5.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture6.PNG
     :width: 350
     :align: center	     	     

Voilà c'est gentiment tout ce que l'on va apporter au component
Header. On remarque qu'il est responsive. 

Occupons-nous de MemeGenerator:

Initialize state to save the following data:

- top text
- bottom text
- random image (initialize with "http://i.imgflip.com/1bij.jpg")
 
.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture7.PNG
     :width: 350
     :align: center

We'll be using an API that provides a bunch of meme images.

Your task:
make an API call to "https://api.imgflip.com/get_memes" and save the
data that comes back (`response.data.memes`) to a new state property
called `allMemeImgs`. (The data that comes back is an array)

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture8.PNG
     :width: 350
     :align: center

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture9.PNG
     :width: 350
     :align: center	     

Parfait cela nous renvoit un objet avec plusieurs propriété. Celle qui
va nous intéresser est l'url.

A la place de <h1>MEME GENERATOR SECTION</h1>, nous allons mettre un
controlled form. Voici l'énoncé de l'exercice:

Create 2 input fields, one for the topText and one for the
bottomText. Remember that these will be "controlled forms", so make
sure to add all the attributes you'll need for that to work

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture10.PNG
     :width: 350
     :align: center	     

Create the onChange handler method. It should update the corresponding
state on every change of the input box.

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture11.PNG
     :width: 350
     :align: center	     

Ne pas oublier le bind à placer dans constructor()

.. image:: /IT/sources/js/react/MemeGeneratorCapstoneProject/Capture12.PNG
     :width: 350
     :align: center

Affichons maintenant les données de state :


	     
	     
Working with .xml
-----------------

JavaScript Tip: Loading XML Data Using Fetch

https://www.youtube.com/watch?v=0gON4MUdJE8

JavaScript Question: How do I Work with XML Data?

https://www.youtube.com/watch?v=Fkw_OlcLcwE


Good videos to learn
--------------------

2.3 HTTP Post Request with fetch() - Working with Data and APIs in JavaScript
https://www.youtube.com/watch?v=Kw5tC5nQMRY&t=443s

2.4 Saving to a Database - Working with Data and APIs in JavaScript
https://www.youtube.com/watch?v=xVYa20DCUv0

Read The Docs
=============

Ce tutoriel montre comment mettre en ligne un document fait avec
**ReStructureText** en utilisant **Read The Docs** via **Github**.

Prérequis
---------

* **Anaconda**
* un éditeur de texte (**emacs**)
* un compte chez **Github** et l'installation sur PC (droits admin requis)
* un compte chez **Read The Docs** (RTD)

Méthode
-------

1. créer un répertoire avec comme nom le nom du projet dans cet
   exemple c'est ``windwaver``
2. dans ce répertoire créer un répertoire nommé ``docs``


#. ouvrir **Anaconda Prompt** (pas le powershell)
#. se déplacer dans le répertoire ``windwaver/docs``
#. tapez:
   
   ::
      
      sphinx-quickstart
      
#. répondre à la question **Seperate source ...** ``y``
   Comme ça les fichiers ``make.bat`` et ``Makefile`` seront seront séparés du
   répertoire ``_sources`` dans lequel seront nos fichiers (``.rst`` et le
   fichier ``config.py``)
#. ouvrir le fichier ``_sources/conf.py``
#. modifier la ligne ``html_theme = 'alabaster'`` par
   ``html_theme = 'sphinx_rtd_theme'`` 
#. ajouter la ligne suivante:``master_doc = 'index'`` sinon ça bug
   avec **Read The Docs** 
#. cliquer-droite sur le répertoire ``windwaver`` et choisir **Git Basch Here**
#. lancer la commande:

   ::

      git init
      
#. lancer la commande:

   ::

      git config --global user.name 'Wind Waver'
      
#. lancer la commande:

   ::

      git config --global user.email 'waverwind@gmail.com'
      
#. lancer la commande:

   ::

      git add .
      
#. lancer la commande:

   ::

      git status
      
#. lancer la commande:

   ::

      git commit -m 'premier changement'
	 
   où ``premier changement`` est le commentaire de la modification 
#. sur https://github.com créer un nouveau répertoire et nommer le
   ``windwaver`` 
#. copier et coller la commande (dans le **MINGW64**):

   ::

      git remote add origin https://github.com/windwaver/windwaver.git


#. copier et coller la commande:

   ::

      git push -u origin master
      
#. créer le fichier ``README``

   ::

      touch README.md
      
#. décrire dans ce fichier le projet (à éditer dans **emacs**). Pour
   la mise en page c'est du **Mark Down**
#. lancer la commande suivante:

   ::

      git add .
      
#. lancer:

   ::

      git commit -m 'rajout de readme'
      
#. ensuite:

   ::

      git push
      
#. sur https://readthedocs.org cliquer sur importer et faire un refresh
#. choisir le dossier ``windwaver``
#. cliquer sur build, cela va créer le site
#. éditer les différents fichiers
#. à chaque modification lancer les commandes suivante:

   ::

      git add .
      git commit -m 'commentaire de la modification'
      git push

#. attendre quelques seconde et rafraichir le site avec ``F5``

   
Permission denied
^^^^^^^^^^^^^^^^^

Il arrive parfois après la commande ``push -u...`` que le message
suivant s'affiche:

.. image:: /IT/figures/Permissions-Denied.PNG
    :scale: 100 %
    :align: center

Méthode pour réparer
''''''''''''''''''''

1. **touche windows** tapez *credential manager* (pour l'anglais) ou
   *gestionnaire d'identification* (pour le français)
   
   .. image:: /IT/figures/Credential-Manager.PNG
       :scale: 80 %
       :align: center

2. repérer  **GitHub** et cliquer sur ``remove``

   .. image:: /IT/figures/Credential-Manager-1.PNG
       :scale: 100 %
       :align: center

	       
Divers liens
------------

|lien9|

.. |lien9| raw:: html

   <a href="https://www.ericholscher.com/blog/2016/jul/1/sphinx-and-rtd-for-writers/" 
   target="_blank">ericholscher</a>
   

GitHub
======

Une bonne vidéo pour apprendre
------------------------------

Cliquer |lien10|


.. |lien10| raw:: html

  <a href="https://www.youtube.com/watch?v=SWYqp7iY_Tc&t=1751s"
  target="_blank">ici</a>

  
Installation
------------

Cliquer |lien11|


.. |lien11| raw:: html

  <a href="https://git-scm.com/download/win/"
  target="_blank">ici</a>

Pour modifier un projet
-----------------------

1. créer un repertoire
2. clique-droite sur le répertoire et choisir ``git bash``

#.

   ::

     git init

#. 

   ::

      git config --global user.name 'Wind Waver'
      
#. 

   ::

      git config --global user.email 'waverwind@gmail.com'
      
#.

   ::

      git clone https://github.com/windwaver/windwaver.git

#.

   ::

      git pull

#.

   ::

      git remote add origin https://github.com/windwaver/windwaver.git

#.

   ::

      git push -u origin master

      
Petites applications
====================

Cette section présente des petites applications ou outils permettant
de faire des petites choses utiles.

GSview
------
.. _extraire une page d'un document pdf:

Extraction d'une page d'un document pdf
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1) ouvrir avec GSview
2) Fichier -> Convert
3) choisir la bonne page et mettre Type à pdfwrite.

.. _briss:
   
BRISS
-----
Cette application permet de rogner une figure pdf.

Touches racourcis :
^^^^^^^^^^^^^^^^^^^
+-+----------------------+
|l|pour loader un fichier|
+-+----------------------+
|c|pour rogner (crop)    |
+-+----------------------+

GIMP
----

Convertir une image en .eps
^^^^^^^^^^^^^^^^^^^^^^^^^^^
1) Fichier -> enregistrer sous
2) entrer le nom_fichier.eps


Convertir divers formats
------------------------

Convertir pdf en png
^^^^^^^^^^^^^^^^^^^^
Essayer PDF to PNG |pdftopng|

 .. |pdftopng| raw:: html

   <a href="https://pdf2png.com/"
   target="_blank">ici</a>
   

Convertir .rst en .tex
^^^^^^^^^^^^^^^^^^^^^^
Essayer pandoc |pendoc|

 .. |pendoc| raw:: html

   <a href="http://pandoc.org/try/?text=&from=rst&to=rst"
   target="_blank">ici</a>

Conversions du son
^^^^^^^^^^^^^^^^^^

CD -> mp3
'''''''''

* Avec Ubuntu 12.04, j'utilise ``asunder``, c'est un bon programme car
  il extrait directement les métadonnées du CD.  

* ``soundKonverter`` : on peut aussi utiliser ce programme. Astuce :
  copier/coller le contenu du CD sur le disque dur. 

  
Extraire une bande son
''''''''''''''''''''''

Pour couper (extraire/éditer) une bande son :
``Audacity``

PLEX
----

Remote access
^^^^^^^^^^^^^

.. image:: /IT/figures/PlexRemoteAccess.png
       :width: 500
       :align: center
